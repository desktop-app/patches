From e688b99995b8c624dbcea296c99fb89262d29e15 Mon Sep 17 00:00:00 2001
From: Liang Qi <liang.qi@qt.io>
Date: Thu, 17 Dec 2020 17:22:48 +0100
Subject: [PATCH] QInputControl: accept surrogate category character

See also https://unicodebook.readthedocs.io/unicode_encodings.html#utf-16-surrogate-pairs .

Fixes: QTBUG-89184 https://github.com/telegramdesktop/tdesktop/issues/9860
Pick-to: 6.0 5.15
Change-Id: I04eff7f42f0030346603a7b31e4ac854a477030c
Reviewed-by: Lars Knoll <lars.knoll@qt.io>
---

diff --git a/src/gui/text/qinputcontrol.cpp b/src/gui/text/qinputcontrol.cpp
index 3381fdb..80d5e6a 100644
--- a/src/gui/text/qinputcontrol.cpp
+++ b/src/gui/text/qinputcontrol.cpp
@@ -79,6 +79,9 @@
     if (c.category() == QChar::Other_PrivateUse)
         return true;
 
+    if (c.isHighSurrogate() && text.length() > 1 && text.at(1).isLowSurrogate())
+        return true;
+
     if (m_type == TextEdit && c == QLatin1Char('\t'))
         return true;
 
diff --git a/tests/auto/gui/text/qinputcontrol/tst_qinputcontrol.cpp b/tests/auto/gui/text/qinputcontrol/tst_qinputcontrol.cpp
index 16f0195..3e64c3c 100644
--- a/tests/auto/gui/text/qinputcontrol/tst_qinputcontrol.cpp
+++ b/tests/auto/gui/text/qinputcontrol/tst_qinputcontrol.cpp
@@ -58,6 +58,52 @@
     QTest::newRow("printable-latin-with-ctrl-shift") << QString(QLatin1Char('a')) << Qt::KeyboardModifiers(Qt::ControlModifier | Qt::ShiftModifier) << false;
     QTest::newRow("printable-hebrew") << QString(QChar(0x2135)) << Qt::KeyboardModifiers() << true;
     QTest::newRow("private-use-area") << QString(QChar(0xE832)) << Qt::KeyboardModifiers() << true;
+    QTest::newRow("good-surrogate-0") << QString::fromUtf16(u"\U0001F44D") << Qt::KeyboardModifiers() << true;
+    {
+        const QChar data[] = { QChar(0xD800), QChar(0xDC00) };
+        const QString str = QString(data, 2);
+        QTest::newRow("good-surrogate-1") << str << Qt::KeyboardModifiers() << true;
+    }
+    {
+        const QChar data[] = { QChar(0xD800), QChar(0xDFFF) };
+        const QString str = QString(data, 2);
+        QTest::newRow("good-surrogate-2") << str << Qt::KeyboardModifiers() << true;
+    }
+    {
+        const QChar data[] = { QChar(0xDBFF), QChar(0xDC00) };
+        const QString str = QString(data, 2);
+        QTest::newRow("good-surrogate-3") << str << Qt::KeyboardModifiers() << true;
+    }
+    {
+        const QChar data[] = { QChar(0xDBFF), QChar(0xDFFF) };
+        const QString str = QString(data, 2);
+        QTest::newRow("good-surrogate-4") << str << Qt::KeyboardModifiers() << true;
+    }
+    {
+        const QChar data[] = { QChar(0xD7FF), QChar(0xDC00) };
+        const QString str = QString(data, 2);
+        QTest::newRow("bad-surrogate-1") << str << Qt::KeyboardModifiers() << false;
+    }
+    {
+        const QChar data[] = { QChar(0xD7FF), QChar(0xDFFF) };
+        const QString str = QString(data, 2);
+        QTest::newRow("bad-surrogate-2") << str << Qt::KeyboardModifiers() << false;
+    }
+    {
+        const QChar data[] = { QChar(0xDC00), QChar(0xDC00) };
+        const QString str = QString(data, 2);
+        QTest::newRow("bad-surrogate-3") << str << Qt::KeyboardModifiers() << false;
+    }
+    {
+        const QChar data[] = { QChar(0xD800), QChar(0xE000) };
+        const QString str = QString(data, 2);
+        QTest::newRow("bad-surrogate-4") << str << Qt::KeyboardModifiers() << false;
+    }
+    {
+        const QChar data[] = { QChar(0xD800) };
+        const QString str = QString(data, 1);
+        QTest::newRow("bad-surrogate-5") << str << Qt::KeyboardModifiers() << false;
+    }
     QTest::newRow("multiple-printable") << QStringLiteral("foobar") << Qt::KeyboardModifiers() << true;
     QTest::newRow("rlm") << QString(QChar(0x200F)) << Qt::KeyboardModifiers() << true;
     QTest::newRow("rlm-with-ctrl") << QString(QChar(0x200F)) << Qt::KeyboardModifiers(Qt::ControlModifier) << true;
