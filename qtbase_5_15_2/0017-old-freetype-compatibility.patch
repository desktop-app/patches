diff --git a/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp b/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp
index c9fe129d4e..aadfd2ea4b 100644
--- a/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp
+++ b/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp
@@ -58,6 +58,7 @@
 #include "qthreadstorage.h"
 #include <qmath.h>
 #include <qendian.h>
+#include <dlfcn.h>
 
 #include <ft2build.h>
 #include FT_FREETYPE_H
@@ -92,6 +93,8 @@ QT_BEGIN_NAMESPACE
 #define TRUNC(x)    ((x) >> 6)
 #define ROUND(x)    (((x)+32) & -64)
 
+const char *(*ptrFT_Get_Font_Format)(FT_Face face) = nullptr;
+
 static bool ft_getSfntTable(void *user_data, uint tag, uchar *buffer, uint *length)
 {
     FT_Face face = (FT_Face)user_data;
@@ -146,7 +149,7 @@ QtFreetypeData *qt_getFreetypeData()
     QtFreetypeData *&freetypeData = theFreetypeData()->localData();
     if (!freetypeData)
         freetypeData = new QtFreetypeData;
-    if (!freetypeData->library) {
+    if (!freetypeData->library && ptrFT_Get_Font_Format) {
         FT_Init_FreeType(&freetypeData->library);
 #if defined(FT_FONT_FORMATS_H)
         // Freetype defaults to disabling stem-darkening on CFF, we re-enable it.
@@ -695,6 +698,9 @@ QFontEngineFT::QFontEngineFT(const QFontDef &fd)
     m_subPixelPositionCount = 4;
     forceAutoHint = false;
     stemDarkeningDriver = false;
+    ptrFT_Get_Font_Format = reinterpret_cast<decltype(ptrFT_Get_Font_Format)>(dlsym(
+        RTLD_DEFAULT,
+        "FT_Get_Font_Format"));
 }
 
 QFontEngineFT::~QFontEngineFT()
@@ -807,7 +813,7 @@ bool QFontEngineFT::init(FaceId faceId, bool antialias, GlyphFormat format,
         }
     }
 #if defined(FT_FONT_FORMATS_H)
-    const char *fmt = FT_Get_Font_Format(face);
+    const char *fmt = ptrFT_Get_Font_Format ? ptrFT_Get_Font_Format(face) : nullptr;
     if (fmt && qstrncmp(fmt, "CFF", 4) == 0) {
         FT_Bool no_stem_darkening = true;
         FT_Error err = FT_Property_Get(qt_getFreetype(), "cff", "no-stem-darkening", &no_stem_darkening);
