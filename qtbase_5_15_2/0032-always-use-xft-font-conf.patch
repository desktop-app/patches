diff --git a/src/platformsupport/fontdatabases/fontconfig/qfontconfigdatabase.cpp b/src/platformsupport/fontdatabases/fontconfig/qfontconfigdatabase.cpp
index 0d4bc288ea..ad5fd6b98b 100644
--- a/src/platformsupport/fontdatabases/fontconfig/qfontconfigdatabase.cpp
+++ b/src/platformsupport/fontdatabases/fontconfig/qfontconfigdatabase.cpp
@@ -48,8 +48,6 @@
 
 #include <qpa/qplatformnativeinterface.h>
 #include <qpa/qplatformscreen.h>
-#include <qpa/qplatformintegration.h>
-#include <qpa/qplatformservices.h>
 
 #include <QtGui/private/qguiapplication_p.h>
 #include <QtGui/private/qhighdpiscaling_p.h>
@@ -614,7 +612,7 @@ QFontEngineMulti *QFontconfigDatabase::fontEngineMulti(QFontEngine *fontEngine,
 }
 
 namespace {
-QFontEngine::HintStyle defaultHintStyleFromMatch(QFont::HintingPreference hintingPreference, FcPattern *match, bool useXftConf)
+QFontEngine::HintStyle defaultHintStyleFromMatch(QFont::HintingPreference hintingPreference, FcPattern *match)
 {
     switch (hintingPreference) {
     case QFont::PreferNoHinting:
@@ -630,9 +628,15 @@ QFontEngine::HintStyle defaultHintStyleFromMatch(QFont::HintingPreference hintin
     if (QHighDpiScaling::isActive())
         return QFontEngine::HintNone;
 
-    int hint_style = 0;
-    if (FcPatternGetInteger (match, FC_HINT_STYLE, 0, &hint_style) == FcResultMatch) {
-        switch (hint_style) {
+    void *hintStyleResource =
+            QGuiApplication::platformNativeInterface()->nativeResourceForScreen("hintstyle",
+                                                                                QGuiApplication::primaryScreen());
+    int hintStyle = int(reinterpret_cast<qintptr>(hintStyleResource));
+    if (hintStyle > 0)
+        return QFontEngine::HintStyle(hintStyle - 1);
+
+    if (FcPatternGetInteger (match, FC_HINT_STYLE, 0, &hintStyle) == FcResultMatch) {
+        switch (hintStyle) {
         case FC_HINT_NONE:
             return QFontEngine::HintNone;
         case FC_HINT_SLIGHT:
@@ -647,23 +651,20 @@ QFontEngine::HintStyle defaultHintStyleFromMatch(QFont::HintingPreference hintin
         }
     }
 
-    if (useXftConf) {
-        void *hintStyleResource =
-                QGuiApplication::platformNativeInterface()->nativeResourceForScreen("hintstyle",
-                                                                                    QGuiApplication::primaryScreen());
-        int hintStyle = int(reinterpret_cast<qintptr>(hintStyleResource));
-        if (hintStyle > 0)
-            return QFontEngine::HintStyle(hintStyle - 1);
-    }
-
     return QFontEngine::HintFull;
 }
 
-QFontEngine::SubpixelAntialiasingType subpixelTypeFromMatch(FcPattern *match, bool useXftConf)
+QFontEngine::SubpixelAntialiasingType subpixelTypeFromMatch(FcPattern *match)
 {
-    int subpixel = FC_RGBA_UNKNOWN;
-    if (FcPatternGetInteger(match, FC_RGBA, 0, &subpixel) == FcResultMatch) {
-        switch (subpixel) {
+    void *subpixelTypeResource =
+            QGuiApplication::platformNativeInterface()->nativeResourceForScreen("subpixeltype",
+                                                                                QGuiApplication::primaryScreen());
+    int subpixelType = int(reinterpret_cast<qintptr>(subpixelTypeResource));
+    if (subpixelType > 0)
+        return QFontEngine::SubpixelAntialiasingType(subpixelType - 1);
+
+    if (FcPatternGetInteger(match, FC_RGBA, 0, &subpixelType) == FcResultMatch) {
+        switch (subpixelType) {
         case FC_RGBA_UNKNOWN:
         case FC_RGBA_NONE:
             return QFontEngine::Subpixel_None;
@@ -681,15 +682,6 @@ QFontEngine::SubpixelAntialiasingType subpixelTypeFromMatch(FcPattern *match, bo
         }
     }
 
-    if (useXftConf) {
-        void *subpixelTypeResource =
-                QGuiApplication::platformNativeInterface()->nativeResourceForScreen("subpixeltype",
-                                                                                    QGuiApplication::primaryScreen());
-        int subpixelType = int(reinterpret_cast<qintptr>(subpixelTypeResource));
-        if (subpixelType > 0)
-            return QFontEngine::SubpixelAntialiasingType(subpixelType - 1);
-    }
-
     return QFontEngine::Subpixel_None;
 }
 } // namespace
@@ -926,23 +918,6 @@ void QFontconfigDatabase::setupFontEngine(QFontEngineFT *engine, const QFontDef
     bool antialias = !(fontDef.styleStrategy & QFont::NoAntialias);
     bool forcedAntialiasSetting = !antialias || QHighDpiScaling::isActive();
 
-    const QPlatformServices *services = QGuiApplicationPrivate::platformIntegration()->services();
-    bool useXftConf = false;
-
-    if (services) {
-        const QList<QByteArray> desktopEnv = services->desktopEnvironment().split(':');
-        useXftConf = desktopEnv.contains("GNOME") || desktopEnv.contains("UNITY") || desktopEnv.contains("XFCE");
-    }
-
-    if (useXftConf && !forcedAntialiasSetting) {
-        void *antialiasResource =
-                QGuiApplication::platformNativeInterface()->nativeResourceForScreen("antialiasingEnabled",
-                                                                                    QGuiApplication::primaryScreen());
-        int antialiasingEnabled = int(reinterpret_cast<qintptr>(antialiasResource));
-        if (antialiasingEnabled > 0)
-            antialias = antialiasingEnabled - 1;
-    }
-
     QFontEngine::GlyphFormat format;
     // try and get the pattern
     FcPattern *pattern = FcPatternCreate();
@@ -974,7 +949,7 @@ void QFontconfigDatabase::setupFontEngine(QFontEngineFT *engine, const QFontDef
 
     FcPattern *match = FcFontMatch(nullptr, pattern, &result);
     if (match) {
-        engine->setDefaultHintStyle(defaultHintStyleFromMatch((QFont::HintingPreference)fontDef.hintingPreference, match, useXftConf));
+        engine->setDefaultHintStyle(defaultHintStyleFromMatch((QFont::HintingPreference)fontDef.hintingPreference, match));
 
         FcBool fc_autohint;
         if (FcPatternGetBool(match, FC_AUTOHINT,0, &fc_autohint) == FcResultMatch)
@@ -990,12 +965,19 @@ void QFontconfigDatabase::setupFontEngine(QFontEngineFT *engine, const QFontDef
             FcBool fc_antialias;
             if (FcPatternGetBool(match, FC_ANTIALIAS,0, &fc_antialias) == FcResultMatch)
                 antialias = fc_antialias;
+
+            void *antialiasResource =
+                    QGuiApplication::platformNativeInterface()->nativeResourceForScreen("antialiasingEnabled",
+                                                                                        QGuiApplication::primaryScreen());
+            int antialiasingEnabled = int(reinterpret_cast<qintptr>(antialiasResource));
+            if (antialiasingEnabled > 0)
+                antialias = antialiasingEnabled - 1;
         }
 
         if (antialias) {
             QFontEngine::SubpixelAntialiasingType subpixelType = QFontEngine::Subpixel_None;
             if (!(fontDef.styleStrategy & QFont::NoSubpixelAntialias))
-                subpixelType = subpixelTypeFromMatch(match, useXftConf);
+                subpixelType = subpixelTypeFromMatch(match);
             engine->subpixelType = subpixelType;
 
             format = (subpixelType == QFontEngine::Subpixel_None)
