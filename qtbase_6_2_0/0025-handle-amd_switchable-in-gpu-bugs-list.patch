diff --git a/src/gui/opengl/qopengl.cpp b/src/gui/opengl/qopengl.cpp
index 3066b83282..cc5947b4f6 100644
--- a/src/gui/opengl/qopengl.cpp
+++ b/src/gui/opengl/qopengl.cpp
@@ -389,6 +389,12 @@ static bool matches(const QJsonObject &object,
         }
     }
 
+    if (object.value(QLatin1String("multi_gpu_style")).toString() == QLatin1String("amd_switchable")) {
+        if (!gpu.amdSwitchable) {
+            return false;
+        }
+    }
+
     return true;
 }
 
diff --git a/src/gui/opengl/qopengl_p.h b/src/gui/opengl/qopengl_p.h
index 07fd159ba8..1490a7e2d6 100644
--- a/src/gui/opengl/qopengl_p.h
+++ b/src/gui/opengl/qopengl_p.h
@@ -95,6 +95,8 @@ public:
         QByteArray driverDescription;
         QByteArray glVendor;
 
+        bool amdSwitchable = false;
+
         static Gpu fromDevice(uint vendorId, uint deviceId, QVersionNumber driverVersion, const QByteArray &driverDescription) {
             Gpu gpu;
             gpu.vendorId = vendorId;
diff --git a/src/plugins/platforms/windows/qwindowsopengltester.cpp b/src/plugins/platforms/windows/qwindowsopengltester.cpp
index 0b1af47a65..b75c34be62 100644
--- a/src/plugins/platforms/windows/qwindowsopengltester.cpp
+++ b/src/plugins/platforms/windows/qwindowsopengltester.cpp
@@ -61,6 +61,7 @@
 QT_BEGIN_NAMESPACE
 
 static const DWORD VENDOR_ID_AMD = 0x1002;
+static const DWORD VENDOR_ID_INTEL = 0x8086;
 
 static GpuDescription adapterIdentifierToGpuDescription(const D3DADAPTER_IDENTIFIER9 &adapterIdentifier)
 {
@@ -141,31 +142,42 @@ GpuDescription GpuDescription::detect()
         isAMD = result.vendorId == VENDOR_ID_AMD;
     }
 
+    bool isIntel = (result.vendorId == VENDOR_ID_INTEL);
+    bool hasAMD = isAMD;
+    bool hasIntel = isIntel;
+
     // Detect QTBUG-50371 (having AMD as the default adapter results in a crash
     // when starting apps on a screen connected to the Intel card) by looking
     // for a default AMD adapter and an additional non-AMD one.
-    if (isAMD) {
+	if (true || isAMD) {
         const UINT adapterCount = direct3D9.adapterCount();
         for (UINT adp = 1; adp < adapterCount; ++adp) {
-            if (direct3D9.retrieveAdapterIdentifier(adp, &adapterIdentifier)
-                && adapterIdentifier.VendorId != VENDOR_ID_AMD) {
-                // Bingo. Now figure out the display for the AMD card.
-                DISPLAY_DEVICE dd;
-                memset(&dd, 0, sizeof(dd));
-                dd.cb = sizeof(dd);
-                for (int dev = 0; EnumDisplayDevices(nullptr, dev, &dd, 0); ++dev) {
-                    if (dd.StateFlags & DISPLAY_DEVICE_PRIMARY_DEVICE) {
-                        // DeviceName is something like \\.\DISPLAY1 which can be used to
-                        // match with the MONITORINFOEX::szDevice queried by QWindowsScreen.
-                        result.gpuSuitableScreen = QString::fromWCharArray(dd.DeviceName);
-                        break;
+            if (direct3D9.retrieveAdapterIdentifier(adp, &adapterIdentifier)) {
+                if (isAMD && adapterIdentifier.VendorId != VENDOR_ID_AMD) {
+                    // Bingo. Now figure out the display for the AMD card.
+                    DISPLAY_DEVICE dd;
+                    memset(&dd, 0, sizeof(dd));
+                    dd.cb = sizeof(dd);
+                    for (int dev = 0; EnumDisplayDevices(nullptr, dev, &dd, 0); ++dev) {
+                        if (dd.StateFlags & DISPLAY_DEVICE_PRIMARY_DEVICE) {
+                            // DeviceName is something like \\.\DISPLAY1 which can be used to
+                            // match with the MONITORINFOEX::szDevice queried by QWindowsScreen.
+                            result.gpuSuitableScreen = QString::fromWCharArray(dd.DeviceName);
+                            break;
+                        }
                     }
                 }
-                break;
+                if (adapterIdentifier.VendorId == VENDOR_ID_AMD) {
+                    hasAMD = true;
+                } else if (adapterIdentifier.VendorId == VENDOR_ID_INTEL) {
+                    hasIntel = true;
+                }
             }
         }
     }
 
+    result.amdSwitchable = hasAMD && hasIntel;
+
     return result;
 }
 
@@ -286,6 +298,7 @@ QWindowsOpenGLTester::Renderers QWindowsOpenGLTester::detectSupportedRenderers(c
     return {};
 #else
     QOpenGLConfig::Gpu qgpu = QOpenGLConfig::Gpu::fromDevice(gpu.vendorId, gpu.deviceId, gpu.driverVersion, gpu.description);
+    qgpu.amdSwitchable = gpu.amdSwitchable;
     SupportedRenderersCache *srCache = supportedRenderersCache();
     SupportedRenderersCache::const_iterator it = srCache->constFind(qgpu);
     if (it != srCache->cend())
diff --git a/src/plugins/platforms/windows/qwindowsopengltester.h b/src/plugins/platforms/windows/qwindowsopengltester.h
index 9091949699..e106ab87d2 100644
--- a/src/plugins/platforms/windows/qwindowsopengltester.h
+++ b/src/plugins/platforms/windows/qwindowsopengltester.h
@@ -65,6 +65,8 @@ struct GpuDescription
     QByteArray driverName;
     QByteArray description;
     QString gpuSuitableScreen;
+
+    bool amdSwitchable = false;
 };
 
 #ifndef QT_NO_DEBUG_STREAM
