diff --git a/src/gui/text/qtextengine.cpp b/src/gui/text/qtextengine.cpp
index 74967aeac9..c0d283fb22 100644
--- a/src/gui/text/qtextengine.cpp
+++ b/src/gui/text/qtextengine.cpp
@@ -1395,6 +1395,52 @@ static void applyVisibilityRules(ushort ucs, QGlyphLayout *glyphs, uint glyphPos
     }
 }
 
+// Attempt to work around assertion violation in harfbuzz text shaping.
+// See https://bugreports.qt.io/browse/QTBUG-89155.
+// See 'hb_bool_t is_default_ignorable' in hb-unicode-private.hh
+static inline bool IsDefaultIgnorable(uint ch) {
+    const auto plane = ch >> 16;
+    const auto inrange = [](uint ch, uint from, uint till) {
+        return uint(ch - from) <= uint(till - from);
+    };
+    if (plane == 0) {
+        /* BMP */
+        const auto page = ch >> 8;
+        switch (page) {
+        case 0x00:
+            return (ch == 0x00ADu);
+        case 0x03:
+            return (ch == 0x034Fu);
+        case 0x06:
+            return (ch == 0x061Cu);
+        case 0x17:
+            return inrange(ch, 0x17B4u, 0x17B5u);
+        case 0x18:
+            return inrange(ch, 0x180Bu, 0x180Eu);
+        case 0x20:
+            return inrange(ch, 0x200Bu, 0x200Fu)
+                    || inrange(ch, 0x202Au, 0x202Eu)
+                    || inrange(ch, 0x2060u, 0x206Fu);
+        case 0xFE:
+            return inrange(ch, 0xFE00u, 0xFE0Fu) || ch == 0xFEFFu;
+        case 0xFF:
+            return inrange(ch, 0xFFF0u, 0xFFF8u);
+        default:
+            return false;
+        }
+    } else {
+        /* Other planes */
+        switch (plane) {
+        case 0x01:
+            return inrange(ch, 0x1D173u, 0x1D17Au);
+        case 0x0E:
+            return inrange(ch, 0xE0000u, 0xE0FFFu);
+        default:
+            return false;
+        }
+    }
+}
+
 void QTextEngine::shapeText(int item) const
 {
     Q_ASSERT(item < layoutData->items.size());
@@ -1516,6 +1562,61 @@ void QTextEngine::shapeText(int item) const
         itemBoundaries.append(0);
     }
 
+    // Attempt to work around assertion violation in harfbuzz text shaping.
+    // See https://bugreports.qt.io/browse/QTBUG-89155.
+    for (int k = 0; k < itemBoundaries.size(); k += 3) {
+        const uint item_pos = itemBoundaries[k];
+        const uint item_length =
+            (k + 4 < itemBoundaries.size() ? itemBoundaries[k + 3] : itemLength) - item_pos;
+
+        // Check if the full string part contains only default ignorables.
+        auto ch = reinterpret_cast<const QChar *>(string) + item_pos;
+        const auto end = ch + item_length;
+        for (; ch != end; ++ch) {
+            uint ucs4 = ch->unicode();
+            if (QChar::isHighSurrogate(ucs4) && ch + 1 != end) {
+                uint low = (ch + 1)->unicode();
+                if (QChar::isLowSurrogate(low)) {
+                    // high part never changes in simple casing
+                    ucs4 = QChar::surrogateToUcs4(ucs4, low);
+                    ++ch;
+                }
+            }
+            if (!IsDefaultIgnorable(ucs4)) {
+                break;
+            }
+        }
+
+        const auto allDefaultIgnorables = (ch == end);
+        if (allDefaultIgnorables) {
+            // Make sure harfbuzz will be able to replace those by spaces.
+            const uint engineIdx = itemBoundaries[k + 2];
+            QFontEngine *actualFontEngine = fontEngine;
+            if (actualFontEngine->type() == QFontEngine::Multi) {
+                actualFontEngine = static_cast<QFontEngineMulti *>(fontEngine)->engine(engineIdx);
+            }
+            if (!actualFontEngine->glyphIndex(' ')) {
+                // This is a font without a glyph for space.
+                // If we try to shape an item, containing only default ignorables, with it,
+                // we will end up in Q_UNREACHABLE below, after Q_UNLIKELY(si.num_glyphs == 0).
+                const auto spaceGlyphIndex = fontEngine->glyphIndex(' ');
+                Q_ASSERT(spaceGlyphIndex != 0);
+                const auto goodEngineIdx = (spaceGlyphIndex >> 24);
+                Q_ASSERT(goodEngineIdx != engineIdx);
+
+                uint glyph_pos = itemBoundaries[k + 1];
+                const uint glyph_till =
+                        (k + 5 < itemBoundaries.size() ? itemBoundaries[k + 4] : nGlyphs);
+
+                for (; glyph_pos < glyph_till; ++glyph_pos) {
+                    initialGlyphs.glyphs[glyph_pos] =
+                            (initialGlyphs.glyphs[glyph_pos] & 0x00FFFFFFU) | (goodEngineIdx << 24);
+                }
+                itemBoundaries[k + 2] = goodEngineIdx;
+            }
+        }
+    }
+
 #if QT_CONFIG(harfbuzz)
     if (Q_LIKELY(shapingEnabled && qt_useHarfbuzzNG())) {
         si.num_glyphs = shapeTextWithHarfbuzzNG(si, string, itemLength, fontEngine, itemBoundaries, kerningEnabled, letterSpacing != 0);
