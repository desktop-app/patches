diff --git a/src/corelib/kernel/qcore_mac.mm b/src/corelib/kernel/qcore_mac.mm
index 2507b53442..a7796210f3 100644
--- a/src/corelib/kernel/qcore_mac.mm
+++ b/src/corelib/kernel/qcore_mac.mm
@@ -337,9 +337,13 @@ - (void)dealloc
 #ifdef Q_OS_MACOS
 bool qt_mac_applicationIsInDarkMode()
 {
-    auto appearance = [NSApp.effectiveAppearance bestMatchFromAppearancesWithNames:
-            @[ NSAppearanceNameAqua, NSAppearanceNameDarkAqua ]];
-    return [appearance isEqualToString:NSAppearanceNameDarkAqua];
+    // Patch: Revert "Remove unneeded @available check for macOS <= 10.14 and iOS <= 13".
+    if (__builtin_available(macOS 10.14, *)) {
+        auto appearance = [NSApp.effectiveAppearance bestMatchFromAppearancesWithNames:
+                @[ NSAppearanceNameAqua, NSAppearanceNameDarkAqua ]];
+        return [appearance isEqualToString:NSAppearanceNameDarkAqua];
+    }
+    return false;
 }
 
 bool qt_mac_runningUnderRosetta()
diff --git a/src/plugins/platforms/cocoa/qcocoatheme.mm b/src/plugins/platforms/cocoa/qcocoatheme.mm
index a6804accde..ff91539490 100644
--- a/src/plugins/platforms/cocoa/qcocoatheme.mm
+++ b/src/plugins/platforms/cocoa/qcocoatheme.mm
@@ -98,9 +98,15 @@
     // System palette initialization:
     QBrush br = qt_mac_toQBrush([NSColor selectedControlColor]);
     palette->setBrush(QPalette::Active, QPalette::Highlight, br);
-    const auto inactiveHighlight = qt_mac_toQBrush([NSColor unemphasizedSelectedContentBackgroundColor]);
-    palette->setBrush(QPalette::Inactive, QPalette::Highlight, inactiveHighlight);
-    palette->setBrush(QPalette::Disabled, QPalette::Highlight, inactiveHighlight);
+    // Patch: Revert "Remove unneeded @available check for macOS <= 10.14 and iOS <= 13".
+    if (__builtin_available(macOS 10.14, *)) {
+        const auto inactiveHighlight = qt_mac_toQBrush([NSColor unemphasizedSelectedContentBackgroundColor]);
+        palette->setBrush(QPalette::Inactive, QPalette::Highlight, inactiveHighlight);
+        palette->setBrush(QPalette::Disabled, QPalette::Highlight, inactiveHighlight);
+    } else {
+        palette->setBrush(QPalette::Inactive, QPalette::Highlight, br);
+        palette->setBrush(QPalette::Disabled, QPalette::Highlight, br);
+    }
 
     palette->setBrush(QPalette::Shadow, qt_mac_toQColor([NSColor shadowColor]));
 
@@ -186,7 +192,18 @@ inline QMacPaletteMap(QPlatformTheme::Palette p, NSColor *a, NSColor *i) :
         if (mac_widget_colors[i].paletteRole == QPlatformTheme::MenuPalette
                 || mac_widget_colors[i].paletteRole == QPlatformTheme::MenuBarPalette) {
             // Cheap approximation for NSVisualEffectView (see deprecation note for selectedMenuItemTextColor)
-            auto selectedMenuItemColor = [[NSColor selectedContentBackgroundColor] highlightWithLevel:0.4];
+            // Patch: Revert "Remove unneeded @available check for macOS <= 10.14 and iOS <= 13".
+            NSColor *selectedMenuItemColor = nil;
+            if (__builtin_available(macOS 10.14, *)) {
+                // Cheap approximation for NSVisualEffectView (see deprecation note for selectedMenuItemTextColor)
+                selectedMenuItemColor = [[NSColor selectedContentBackgroundColor] highlightWithLevel:0.4];
+            } else {
+                // selectedMenuItemColor would presumably be the correct color to use as the background
+                // for selected menu items. But that color is always blue, and doesn't follow the
+                // appearance color in system preferences. So we therefore deliberately choose to use
+                // keyboardFocusIndicatorColor instead, which appears to have the same color value.
+                selectedMenuItemColor = [NSColor keyboardFocusIndicatorColor];
+            }
             pal.setBrush(QPalette::Highlight, qt_mac_toQColor(selectedMenuItemColor));
             qc = qt_mac_toQColor([NSColor labelColor]);
             pal.setBrush(QPalette::ButtonText, qc);
@@ -207,10 +224,18 @@ inline QMacPaletteMap(QPlatformTheme::Palette p, NSColor *a, NSColor *i) :
         } else if (mac_widget_colors[i].paletteRole == QPlatformTheme::ItemViewPalette) {
             NSArray<NSColor *> *baseColors = nil;
             NSColor *activeHighlightColor = nil;
-            baseColors = [NSColor alternatingContentBackgroundColors];
-            activeHighlightColor = [NSColor selectedContentBackgroundColor];
-            pal.setBrush(QPalette::Inactive, QPalette::HighlightedText,
-                         qt_mac_toQBrush([NSColor unemphasizedSelectedTextColor]));
+            // Patch: Revert "Remove unneeded @available check for macOS <= 10.14 and iOS <= 13".
+            if (__builtin_available(macOS 10.14, *)) {
+                baseColors = [NSColor alternatingContentBackgroundColors];
+                activeHighlightColor = [NSColor selectedContentBackgroundColor];
+                pal.setBrush(QPalette::Inactive, QPalette::HighlightedText,
+                             qt_mac_toQBrush([NSColor unemphasizedSelectedTextColor]));
+            } else {
+                baseColors = [NSColor controlAlternatingRowBackgroundColors];
+                activeHighlightColor = [NSColor alternateSelectedControlColor];
+                pal.setBrush(QPalette::Inactive, QPalette::HighlightedText,
+                             pal.brush(QPalette::Active, QPalette::Text));
+            }
             pal.setBrush(QPalette::Base, qt_mac_toQBrush(baseColors[0]));
             pal.setBrush(QPalette::AlternateBase, qt_mac_toQBrush(baseColors[1]));
             pal.setBrush(QPalette::Active, QPalette::Highlight,
@@ -246,7 +271,9 @@ inline QMacPaletteMap(QPlatformTheme::Palette p, NSColor *a, NSColor *i) :
 {
     if (QOperatingSystemVersion::current() >= QOperatingSystemVersion::MacOSMojave) {
         m_appearanceObserver = QMacKeyValueObserver(NSApp, @"effectiveAppearance", [this] {
-            NSAppearance.currentAppearance = NSApp.effectiveAppearance;
+            // Patch: Revert "Remove unneeded @available check for macOS <= 10.14 and iOS <= 13".
+            if (__builtin_available(macOS 10.14, *))
+                NSAppearance.currentAppearance = NSApp.effectiveAppearance;
             handleSystemThemeChange();
         });
     }
diff --git a/src/plugins/styles/mac/qmacstyle_mac.mm b/src/plugins/styles/mac/qmacstyle_mac.mm
index a20030f1a6..6684720330 100644
--- a/src/plugins/styles/mac/qmacstyle_mac.mm
+++ b/src/plugins/styles/mac/qmacstyle_mac.mm
@@ -1849,9 +1849,14 @@ Carbon draws comboboxes (and other views) outside the rect given as argument. Us
         || widget.size == QStyleHelper::SizeDefault)
         return nil;
 
-    if (widget.type == Box && isDarkMode()) {
-        // See render code in drawPrimitive(PE_FrameTabWidget)
-        widget.type = Box_Dark;
+    if (widget.type == Box) {
+        // Patch: Revert "Remove unneeded @available check for macOS <= 10.14 and iOS <= 13".
+        if (__builtin_available(macOS 10.14, *)) {
+            if (isDarkMode()) {
+                // See render code in drawPrimitive(PE_FrameTabWidget)
+                widget.type = Box_Dark;
+            }
+        }
     }
 
     NSView *bv = cocoaControls.value(widget, nil);
