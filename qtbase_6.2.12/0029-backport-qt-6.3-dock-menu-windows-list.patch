diff --git a/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm b/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm
index a15228f27e..8948b4ab3b 100644
--- a/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm
+++ b/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm
@@ -75,6 +75,7 @@
 
 #include "qcocoaapplicationdelegate.h"
 #include "qcocoaintegration.h"
+#include "qcocoamenubar.h"
 #include "qcocoamenu.h"
 #include "qcocoamenuloader.h"
 #include "qcocoamenuitem.h"
@@ -235,6 +236,8 @@ QT_USE_NAMESPACE
         // (See the activateIgnoringOtherApps docs.)
         [[NSApplication sharedApplication] activateIgnoringOtherApps:YES];
     }
+
+    QCocoaMenuBar::insertWindowMenu();
 }
 
 - (void)application:(NSApplication *)sender openFiles:(NSArray *)filenames
diff --git a/src/plugins/platforms/cocoa/qcocoamenubar.h b/src/plugins/platforms/cocoa/qcocoamenubar.h
index 7186e48829..e2eebf9021 100644
--- a/src/plugins/platforms/cocoa/qcocoamenubar.h
+++ b/src/plugins/platforms/cocoa/qcocoamenubar.h
@@ -67,6 +67,7 @@ public:
     NSMenu *nsMenu() const override { return m_nativeMenu; }
 
     static void updateMenuBarImmediately();
+    static void insertWindowMenu();
 
     QList<QCocoaMenuItem*> merged() const;
     NSMenuItem *itemForRole(QPlatformMenuItem::MenuRole role);
diff --git a/src/plugins/platforms/cocoa/qcocoamenubar.mm b/src/plugins/platforms/cocoa/qcocoamenubar.mm
index 2e0eeb06e3..66e2030a77 100644
--- a/src/plugins/platforms/cocoa/qcocoamenubar.mm
+++ b/src/plugins/platforms/cocoa/qcocoamenubar.mm
@@ -328,9 +328,36 @@ void QCocoaMenuBar::updateMenuBarImmediately()
 
     [mergedItems release];
     [NSApp setMainMenu:mb->nsMenu()];
+    insertWindowMenu();
     [loader qtTranslateApplicationMenu];
 }
 
+void QCocoaMenuBar::insertWindowMenu()
+{
+    // For such an item/menu we get for 'free' an additional feature -
+    // a list of windows the application has created in the Dock's menu.
+
+    NSApplication *app = NSApplication.sharedApplication;
+    if (app.windowsMenu)
+        return;
+
+    NSMenu *mainMenu = app.mainMenu;
+    NSMenuItem *winMenuItem = [[[NSMenuItem alloc] initWithTitle:@"QtWindowMenu"
+                                                   action:nil keyEquivalent:@""] autorelease];
+    // We don't want to show this menu, nobody asked us to do so:
+    winMenuItem.hidden = YES;
+
+    winMenuItem.submenu = [[[NSMenu alloc] initWithTitle:@"QtWindowMenu"] autorelease];
+    [mainMenu insertItem:winMenuItem atIndex:mainMenu.itemArray.count];
+    app.windowsMenu = winMenuItem.submenu;
+
+    // Windows, created and 'ordered front' before, will not be in this menu:
+    for (NSWindow *win in app.windows) {
+        if (win.title && ![win.title isEqualToString:@""])
+            [app addWindowsItem:win title:win.title filename:NO];
+    }
+}
+
 QList<QCocoaMenuItem*> QCocoaMenuBar::merged() const
 {
     QList<QCocoaMenuItem*> r;
