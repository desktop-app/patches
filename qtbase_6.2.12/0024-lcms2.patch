diff --git a/cmake/FindLCMS2.cmake b/cmake/FindLCMS2.cmake
new file mode 100644
index 0000000000..fd32d9a783
--- /dev/null
+++ b/cmake/FindLCMS2.cmake
@@ -0,0 +1,78 @@
+# - Find LCMS2
+# Find the LCMS2 includes and library
+# This module defines
+#  LCMS2_INCLUDE_DIR, where to find lcms.h
+#  LCMS2_LIBRARIES, the libraries needed to use LCMS2.
+#  LCMS2_VERSION, The value of LCMS_VERSION defined in lcms.h
+#  LCMS2_FOUND, If false, do not try to use LCMS2.
+
+
+# Copyright (c) 2008, Adrian Page, <adrian@pagenet.plus.com>
+# Copyright (c) 2009, Cyrille Berger, <cberger@cberger.net>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+if(TARGET LCMS2::LCMS2)
+    set(LCMS2_FOUND TRUE)
+    return()
+endif()
+
+# use pkg-config to get the directories and then use these values
+# in the FIND_PATH() and FIND_LIBRARY() calls
+if(NOT WIN32)
+   find_package(PkgConfig)
+   pkg_check_modules(PC_LCMS2 lcms2)
+   set(LCMS2_DEFINITIONS ${PC_LCMS2_CFLAGS_OTHER})
+endif()
+
+find_path(LCMS2_INCLUDE_DIR lcms2.h
+   PATHS
+   ${PC_LCMS2_INCLUDEDIR}
+   ${PC_LCMS2_INCLUDE_DIRS}
+   PATH_SUFFIXES lcms2 liblcms2
+)
+
+find_library(LCMS2_LIBRARIES NAMES lcms2 liblcms2 lcms-2 liblcms-2
+   PATHS
+   ${PC_LCMS2_LIBDIR}
+   ${PC_LCMS2_LIBRARY_DIRS}
+   PATH_SUFFIXES lcms2
+)
+
+if(LCMS2_INCLUDE_DIR AND LCMS2_LIBRARIES)
+   set(LCMS2_FOUND TRUE)
+else()
+   set(LCMS2_FOUND FALSE)
+endif()
+
+if(LCMS2_FOUND)
+   file(READ ${LCMS2_INCLUDE_DIR}/lcms2.h LCMS2_VERSION_CONTENT)
+   string(REGEX MATCH "#define LCMS_VERSION[ ]*[0-9]*\n" LCMS2_VERSION_MATCH ${LCMS2_VERSION_CONTENT})
+   if(LCMS2_VERSION_MATCH)
+      string(REGEX REPLACE "#define LCMS_VERSION[ ]*([0-9]*)\n" "\\1" LCMS2_VERSION ${LCMS2_VERSION_MATCH})
+      if(NOT LCMS2_FIND_QUIETLY)
+         string(SUBSTRING ${LCMS2_VERSION} 0 1 LCMS2_MAJOR_VERSION)
+         string(SUBSTRING ${LCMS2_VERSION} 1 2 LCMS2_MINOR_VERSION)
+         message(STATUS "Found lcms version ${LCMS2_MAJOR_VERSION}.${LCMS2_MINOR_VERSION}, ${LCMS2_LIBRARIES}")
+      endif()
+   else()
+      if(NOT LCMS2_FIND_QUIETLY)
+         message(STATUS "Found lcms2 but failed to find version ${LCMS2_LIBRARIES}")
+      endif()
+      set(LCMS2_VERSION NOTFOUND)
+   endif()
+   add_library(LCMS2::LCMS2 INTERFACE IMPORTED)
+   target_link_libraries(LCMS2::LCMS2 INTERFACE ${LCMS2_LIBRARIES})
+   target_include_directories(LCMS2::LCMS2 INTERFACE ${LCMS2_INCLUDE_DIR})
+else()
+   if(NOT LCMS2_FIND_QUIETLY)
+      if(LCMS2_FIND_REQUIRED)
+         message(FATAL_ERROR "Required package lcms2 NOT found")
+      else()
+         message(STATUS "lcms2 NOT found")
+      endif()
+   endif()
+endif()
+
+mark_as_advanced(LCMS2_INCLUDE_DIR LCMS2_LIBRARIES LCMS2_VERSION)
diff --git a/src/gui/CMakeLists.txt b/src/gui/CMakeLists.txt
index 9901938445..0bfa4395c1 100644
--- a/src/gui/CMakeLists.txt
+++ b/src/gui/CMakeLists.txt
@@ -557,6 +557,11 @@ qt_internal_extend_target(Gui CONDITION QT_FEATURE_movie
         image/qmovie.cpp image/qmovie.h
 )
 
+qt_internal_extend_target(Gui CONDITION QT_FEATURE_lcms2
+    LIBRARIES
+        LCMS2::LCMS2
+)
+
 qt_internal_extend_target(Gui CONDITION QT_FEATURE_png
     SOURCES
         image/qpnghandler.cpp image/qpnghandler_p.h
diff --git a/src/gui/configure.cmake b/src/gui/configure.cmake
index f3412f9a44..b3453475fa 100644
--- a/src/gui/configure.cmake
+++ b/src/gui/configure.cmake
@@ -55,6 +55,7 @@ qt_find_package(WrapOpenGL PROVIDED_TARGETS WrapOpenGL::WrapOpenGL MODULE_NAME g
 qt_find_package(GLESv2 PROVIDED_TARGETS GLESv2::GLESv2 MODULE_NAME gui QMAKE_LIB opengl_es2)
 qt_find_package(Tslib PROVIDED_TARGETS PkgConfig::Tslib MODULE_NAME gui QMAKE_LIB tslib)
 qt_find_package(WrapVulkanHeaders PROVIDED_TARGETS WrapVulkanHeaders::WrapVulkanHeaders MODULE_NAME gui QMAKE_LIB vulkan MARK_OPTIONAL) # special case
+qt_find_package(LCMS2 PROVIDED_TARGETS LCMS2::LCMS2 MODULE_NAME gui QMAKE_LIB lcms2)
 if((LINUX) OR QT_FIND_ALL_PACKAGES_ALWAYS)
     qt_find_package(Wayland PROVIDED_TARGETS Wayland::Server MODULE_NAME gui QMAKE_LIB wayland_server)
 endif()
@@ -647,6 +647,12 @@ qt_feature("fontconfig" PUBLIC PRIVATE
     CONDITION NOT WIN32 AND QT_FEATURE_system_freetype AND Fontconfig_FOUND
 )
 qt_feature_definition("fontconfig" "QT_NO_FONTCONFIG" NEGATE VALUE "1")
+qt_feature("lcms2" PUBLIC
+    SECTION "Images"
+    LABEL "Little CMS"
+    PURPOSE "Supports the Little CMS color engine."
+    CONDITION LCMS2_FOUND
+)
 qt_feature("gbm"
     LABEL "GBM"
     CONDITION gbm_FOUND
@@ -1203,6 +1210,7 @@ qt_configure_add_summary_entry(ARGS "system-freetype")
 qt_configure_add_summary_entry(ARGS "harfbuzz")
 qt_configure_add_summary_entry(ARGS "system-harfbuzz")
 qt_configure_add_summary_entry(ARGS "fontconfig")
+qt_configure_add_summary_entry(ARGS "lcms2")
 qt_configure_add_summary_section(NAME "Image formats")
 qt_configure_add_summary_entry(ARGS "gif")
 qt_configure_add_summary_entry(ARGS "ico")
diff --git a/src/gui/image/qimage.cpp b/src/gui/image/qimage.cpp
index 26fbb7205a..1abb939046 100644
--- a/src/gui/image/qimage.cpp
+++ b/src/gui/image/qimage.cpp
@@ -79,6 +79,10 @@
 
 #include <memory>
 
+#if QT_CONFIG(lcms2)
+#include <lcms2.h>
+#endif
+
 QT_BEGIN_NAMESPACE
 
 // MSVC 19.28 does show spurious warning "C4723: potential divide by 0" for code that divides
@@ -4950,6 +4954,43 @@ void QImage::setColorSpace(const QColorSpace &colorSpace)
     d->colorSpace = colorSpace;
 }
 
+#if QT_CONFIG(lcms2)
+/**
+* Convert from Qt format to lcms2 format
+*/
+static cmsUInt32Number toLcmsFormat(QImage::Format fmt)
+{
+    switch (fmt) {
+    case QImage::Format_ARGB32:  //  (0xAARRGGBB)
+    case QImage::Format_RGB32:   //  (0xffRRGGBB)
+        return TYPE_BGRA_8;
+
+    case QImage::Format_RGB888:
+        return TYPE_RGB_8;       // 24-bit RGB format (8-8-8).
+
+    case QImage::Format_RGBX8888:
+    case QImage::Format_RGBA8888:
+        return TYPE_RGBA_8;
+
+    case QImage::Format_Grayscale8:
+        return TYPE_GRAY_8;
+
+    case QImage::Format_Grayscale16:
+        return TYPE_GRAY_16;
+
+    case QImage::Format_RGBA64:
+    case QImage::Format_RGBX64:
+        return TYPE_RGBA_16;
+
+    case QImage::Format_BGR888:
+        return TYPE_BGR_8;
+
+    default:
+        return 0;
+    }
+}
+#endif
+
 /*!
     \since 5.14
 
@@ -4963,6 +5004,34 @@ void QImage::convertToColorSpace(const QColorSpace &colorSpace)
 {
     if (!d)
         return;
+#if QT_CONFIG(lcms2)
+    auto lcmsSuccess = false;
+    const auto profileFrom = d->colorSpace.iccProfile();
+    const auto profileTo = colorSpace.iccProfile();
+    if (profileFrom.isEmpty() || profileTo.isEmpty() || profileFrom == profileTo)
+        return;
+    const auto hProfileFrom = cmsOpenProfileFromMem(profileFrom.constData(), profileFrom.size());
+    const auto hProfileTo = cmsOpenProfileFromMem(profileTo.constData(), profileTo.size());
+    const auto lcmsFormat = toLcmsFormat(format());
+    if (hProfileFrom && hProfileTo && lcmsFormat) {
+        const auto xform = cmsCreateTransform(hProfileFrom, lcmsFormat, hProfileTo,
+                                              lcmsFormat, INTENT_PERCEPTUAL, 0);
+        if (xform) {
+            cmsDoTransformLineStride(xform, constBits(), bits(),
+                                     width(), height(), bytesPerLine(),
+                                     bytesPerLine(), 0, 0);
+            d->colorSpace = colorSpace;
+            lcmsSuccess = true;
+            cmsDeleteTransform(xform);
+        }
+    }
+    if (hProfileTo)
+        cmsCloseProfile(hProfileTo);
+    if (hProfileFrom)
+        cmsCloseProfile(hProfileFrom);
+    if (lcmsSuccess)
+        return;
+#endif
     if (!d->colorSpace.isValid())
         return;
     if (!colorSpace.isValid()) {
diff --git a/src/plugins/imageformats/jpeg/CMakeLists.txt b/src/plugins/imageformats/jpeg/CMakeLists.txt
index a5ce61b5a0..9dde122bf2 100644
--- a/src/plugins/imageformats/jpeg/CMakeLists.txt
+++ b/src/plugins/imageformats/jpeg/CMakeLists.txt
@@ -19,6 +19,11 @@ qt_internal_add_plugin(QJpegPlugin
         Qt::GuiPrivate
 )
 
+qt_internal_extend_target(QJpegPlugin CONDITION QT_FEATURE_lcms2
+    LIBRARIES
+        LCMS2::LCMS2
+)
+
 # Fails to build on Windows with a static Qt, PCH enabled and
 # the vendored libjpeg sources, due to 'boolean'
 # redefinition in jmorecfg.h and rpcndr.h.
diff --git a/src/plugins/imageformats/jpeg/qjpeghandler.cpp b/src/plugins/imageformats/jpeg/qjpeghandler.cpp
index 6d88438c47..3931059202 100644
--- a/src/plugins/imageformats/jpeg/qjpeghandler.cpp
+++ b/src/plugins/imageformats/jpeg/qjpeghandler.cpp
@@ -68,6 +68,10 @@ extern "C" {
 #endif
 }
 
+#if QT_CONFIG(lcms2)
+#include <lcms2.h>
+#endif
+
 QT_BEGIN_NAMESPACE
 
 Q_LOGGING_CATEGORY(lcJpeg, "qt.gui.imageio.jpeg")
@@ -241,6 +245,7 @@ static bool read_jpeg_image(QImage *outImage,
                             QSize scaledSize, QRect scaledClipRect,
                             QRect clipRect, int quality,
                             Rgb888ToRgb32Converter converter,
+                            QByteArray &iccProfile,
                             j_decompress_ptr info, struct my_error_mgr* err  )
 {
     if (!setjmp(err->setjmp_buffer)) {
@@ -368,6 +373,25 @@ static bool read_jpeg_image(QImage *outImage,
 
             (void) jpeg_start_decompress(info);
 
+#if QT_CONFIG(lcms2)
+            cmsHPROFILE hProfileFrom = nullptr;
+            cmsHPROFILE hProfileTo = nullptr;
+            cmsHTRANSFORM xform = nullptr;
+            if (info->out_color_space == JCS_CMYK) {
+                hProfileFrom = cmsOpenProfileFromMem(iccProfile.constData(), iccProfile.size());
+                hProfileTo = cmsCreate_sRGBProfile();
+                if (hProfileFrom && hProfileTo) {
+                    xform = cmsCreateTransform(hProfileFrom,
+                                               info->saw_Adobe_marker ? TYPE_CMYK_8_REV : TYPE_CMYK_8,
+                                               hProfileTo, TYPE_BGRA_8, INTENT_PERCEPTUAL, 0);
+                    if (xform)
+                        iccProfile = {};
+                }
+            }
+#else
+            Q_UNUSED(iccProfile);
+#endif
+
             while (info->output_scanline < info->output_height) {
                 int y = int(info->output_scanline) - clip.y();
                 if (y >= clip.height())
@@ -386,6 +410,12 @@ static bool read_jpeg_image(QImage *outImage,
                     // Convert CMYK->RGB.
                     uchar *in = rows[0] + clip.x() * 4;
                     QRgb *out = (QRgb*)outImage->scanLine(y);
+#if QT_CONFIG(lcms2)
+                    if (xform) {
+                        cmsDoTransform(xform, in, out, clip.width());
+                        continue;
+                    }
+#endif
                     for (int i = 0; i < clip.width(); ++i) {
                         int k = in[3];
                         *out++ = qRgb(k * in[0] / 255, k * in[1] / 255,
@@ -398,6 +428,15 @@ static bool read_jpeg_image(QImage *outImage,
                            rows[0] + clip.x(), clip.width());
                 }
             }
+
+#if QT_CONFIG(lcms2)
+            if (xform)
+                cmsDeleteTransform(xform);
+            if (hProfileTo)
+                cmsCloseProfile(hProfileTo);
+            if (hProfileFrom)
+                cmsCloseProfile(hProfileFrom);
+#endif
         } else {
             // Load unclipped grayscale data directly into the QImage.
             (void) jpeg_start_decompress(info);
@@ -1003,7 +1042,7 @@ bool QJpegHandlerPrivate::read(QImage *image)
 
     if (state == ReadHeader)
     {
-        bool success = read_jpeg_image(image, scaledSize, scaledClipRect, clipRect, quality, rgb888ToRgb32ConverterPtr, &info, &err);
+        bool success = read_jpeg_image(image, scaledSize, scaledClipRect, clipRect, quality, rgb888ToRgb32ConverterPtr, iccProfile, &info, &err);
         if (success) {
             for (int i = 0; i < readTexts.size()-1; i+=2)
                 image->setText(readTexts.at(i), readTexts.at(i+1));
