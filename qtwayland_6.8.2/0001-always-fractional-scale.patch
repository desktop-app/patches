diff --git a/src/client/qwaylandcursorsurface_p.h b/src/client/qwaylandcursorsurface_p.h
index 3e011ead..486049bc 100644
--- a/src/client/qwaylandcursorsurface_p.h
+++ b/src/client/qwaylandcursorsurface_p.h
@@ -61,7 +61,7 @@ public:
     {
         int scale = 0;
         for (auto *screen : m_screens)
-            scale = qMax(scale, screen->scale());
+            scale = qMax(scale, qCeil(screen->scale()));
         return scale;
     }
 
diff --git a/src/client/qwaylandscreen.cpp b/src/client/qwaylandscreen.cpp
index ef548925..64dfcdf6 100644
--- a/src/client/qwaylandscreen.cpp
+++ b/src/client/qwaylandscreen.cpp
@@ -182,14 +182,16 @@ Qt::ScreenOrientation QWaylandScreen::orientation() const
     return m_orientation;
 }
 
-int QWaylandScreen::scale() const
+qreal QWaylandScreen::scale() const
 {
-    return mScale;
+    return devicePixelRatio();
 }
 
 qreal QWaylandScreen::devicePixelRatio() const
 {
-    return qreal(mScale);
+    return (mWaylandDisplay->fractionalScaleManager() && std::fmod(mFractionalScale, qreal(1)) != 0)
+        ? mFractionalScale
+        : qreal(mScale);
 }
 
 qreal QWaylandScreen::refreshRate() const
@@ -330,7 +332,6 @@ void QWaylandScreen::updateOutputProperties()
             m_orientation = newOrientation;
             QWindowSystemInterface::handleScreenOrientationChange(screen(), m_orientation);
         }
-        mTransform = -1;
     }
 
     QWindowSystemInterface::handleScreenRefreshRateChange(screen(), refreshRate());
@@ -374,7 +375,24 @@ void QWaylandScreen::zxdg_output_v1_name(const QString &name)
 void QWaylandScreen::updateXdgOutputProperties()
 {
     Q_ASSERT(zxdg_output_v1::isInitialized());
+    bool rotated = false;
+    switch (mTransform) {
+    case WL_OUTPUT_TRANSFORM_90:
+    case WL_OUTPUT_TRANSFORM_180:
+    case WL_OUTPUT_TRANSFORM_FLIPPED_90:
+    case WL_OUTPUT_TRANSFORM_FLIPPED_180:
+        rotated = true;
+        break;
+    }
+    mFractionalScale = std::round((rotated
+        ? qreal(mGeometry.width()) / qreal(mXdgGeometry.height())
+            + qreal(mGeometry.height()) / qreal(mXdgGeometry.width())
+        : qreal(mGeometry.width()) / qreal(mXdgGeometry.width())
+            + qreal(mGeometry.height()) / qreal(mXdgGeometry.height()))
+        * qreal(0.5) * qreal(100)) / qreal(100);
+    const QDpi dpi = logicalDpi();
     QWindowSystemInterface::handleScreenGeometryChange(screen(), geometry(), geometry());
+    QWindowSystemInterface::handleScreenLogicalDotsPerInchChange(screen(), dpi.first, dpi.second);
 }
 
 } // namespace QtWaylandClient
diff --git a/src/client/qwaylandscreen_p.h b/src/client/qwaylandscreen_p.h
index ff3d2321..f735f5dc 100644
--- a/src/client/qwaylandscreen_p.h
+++ b/src/client/qwaylandscreen_p.h
@@ -64,7 +64,7 @@ public:
     QList<QPlatformScreen *> virtualSiblings() const override;
 
     Qt::ScreenOrientation orientation() const override;
-    int scale() const;
+    qreal scale() const;
     qreal devicePixelRatio() const override;
     qreal refreshRate() const override;
 
@@ -121,6 +121,7 @@ protected:
     QRect mGeometry;
     QRect mXdgGeometry;
     int mScale = 1;
+    qreal mFractionalScale = 1;
     int mDepth = 32;
     int mRefreshRate = 60000;
     int mSubpixel = -1;
diff --git a/src/client/qwaylandwindow.cpp b/src/client/qwaylandwindow.cpp
index 81f0dd67..f22ec0e5 100644
--- a/src/client/qwaylandwindow.cpp
+++ b/src/client/qwaylandwindow.cpp
@@ -106,7 +106,7 @@ void QWaylandWindow::initWindow()
         initializeWlSurface();
     }
 
-    if (mDisplay->fractionalScaleManager() && qApp->highDpiScaleFactorRoundingPolicy() == Qt::HighDpiScaleFactorRoundingPolicy::PassThrough) {
+    if (mDisplay->fractionalScaleManager()) {
         mFractionalScale.reset(new QWaylandFractionalScale(mDisplay->fractionalScaleManager()->get_fractional_scale(mSurface->object())));
 
         connect(mFractionalScale.data(), &QWaylandFractionalScale::preferredScaleChanged,
@@ -1478,7 +1478,7 @@ void QWaylandWindow::updateScale()
         return;
     }
 
-    int scale = screen()->isPlaceholder() ? 1 : static_cast<QWaylandScreen *>(screen())->scale();
+    qreal scale = screen()->isPlaceholder() ? qreal(1) : static_cast<QWaylandScreen *>(screen())->scale();
     setScale(scale);
 }
 
@@ -1507,7 +1507,7 @@ void QWaylandWindow::setScale(qreal newScale)
 #if QT_CONFIG(cursor)
 void QWaylandWindow::setMouseCursor(QWaylandInputDevice *device, const QCursor &cursor)
 {
-    int fallbackBufferScale = int(devicePixelRatio());
+    int fallbackBufferScale = qCeil(devicePixelRatio());
     device->setCursor(&cursor, {}, fallbackBufferScale);
 }
 
@@ -1555,7 +1555,7 @@ qreal QWaylandWindow::scale() const
 
 qreal QWaylandWindow::devicePixelRatio() const
 {
-    return mScale.value_or(waylandScreen() ? waylandScreen()->scale() : 1);
+    return mScale.value_or(waylandScreen() ? waylandScreen()->scale() : qreal(1));
 }
 
 bool QWaylandWindow::setMouseGrabEnabled(bool grab)
