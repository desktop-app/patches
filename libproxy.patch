diff --git a/libmodman/CMakeLists.txt b/libmodman/CMakeLists.txt
index 8264b33..35022ca 100644
--- a/libmodman/CMakeLists.txt
+++ b/libmodman/CMakeLists.txt
@@ -7,7 +7,7 @@ else(WIN32)
 endif(WIN32)
 include_directories(${CMAKE_SOURCE_DIR})
 
-add_library(modman STATIC
+add_library(modman OBJECT
             module.hpp
             module_manager.hpp
             module_manager.cpp)
diff --git a/libproxy/CMakeLists.txt b/libproxy/CMakeLists.txt
index 0430895..44ee750 100644
--- a/libproxy/CMakeLists.txt
+++ b/libproxy/CMakeLists.txt
@@ -6,6 +6,7 @@ set_project_version(0 4 17)
 if (WIN32)
   add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
 else(WIN32)
+  add_compile_options(-std=gnu++17)
   add_definitions(-D_POSIX_C_SOURCE=200112L)
   set(CMAKE_CXX_FLAGS "-fvisibility=hidden ${CMAKE_CXX_FLAGS}")
 endif(WIN32)
diff --git a/libproxy/cmake/libproxy.cmk b/libproxy/cmake/libproxy.cmk
index de68e5c..489f40c 100644
--- a/libproxy/cmake/libproxy.cmk
+++ b/libproxy/cmake/libproxy.cmk
@@ -1,4 +1,4 @@
-add_library(libproxy SHARED extension_config.cpp extension_pacrunner.cpp extension_wpad.cpp proxy.cpp url.cpp ${LIBPROXY_SOURCES})
+add_library(libproxy STATIC extension_config.cpp extension_pacrunner.cpp extension_wpad.cpp proxy.cpp url.cpp ${LIBPROXY_SOURCES})
 if(WIN32)
   target_link_libraries(libproxy modman;ws2_32;${LIBPROXY_LIBRARIES})
 else()
diff --git a/libproxy/cmake/modules.cmk b/libproxy/cmake/modules.cmk
index 11d2d43..c4f7e54 100644
--- a/libproxy/cmake/modules.cmk
+++ b/libproxy/cmake/modules.cmk
@@ -29,12 +29,12 @@ endif()
 ## Module definition
 #
 message("MODULES TO BUILD:")
-px_module(config_pacrunner         "${DBUS_FOUND}"   0       ${DBUS_LIBRARIES})
+px_module(config_pacrunner         "${DBUS_FOUND}"   1       ${DBUS_LIBRARIES})
 px_module(config_envvar            "${ENVVAR_FOUND}" 1)
-px_module(config_sysconfig         "${SYSCONFIG_FOUND}" 1)
-px_module(config_gnome             "${GNOME2_FOUND}" 0)
-px_module(config_gnome3            "${GNOME3_FOUND}" 0)
-px_module(config_kde               "${WITH_KDE}"     0)
+px_module(config_sysconfig         1                 1)
+px_module(config_gnome             "${GNOME2_FOUND}" 1)
+px_module(config_gnome3            "${GNOME3_FOUND}" 1)
+px_module(config_kde               "${WITH_KDE}"     1)
 px_module(config_macosx            "${SC_FOUND}"     1       ${SC_LIBRARIES} ${CF_LIBRARIES})
 px_module(config_w32reg            "${WIN32}"        1)
 px_module(ignore_domain            1                 1)
@@ -43,9 +43,9 @@ px_module(ignore_ip                1                 1)
 if(NM_FOUND OR NMold_FOUND)
   set(NM_BUILD 1)
 endif(NM_FOUND OR NMold_FOUND)
-px_module(network_networkmanager   "${NM_BUILD}"     0       ${NM_LIBRARIES}${NMold_LIBRARIES})
+px_module(network_networkmanager   "${NM_BUILD}"     1       ${NM_LIBRARIES}${NMold_LIBRARIES})
 px_module(pacrunner_mozjs          0                 ${BIPR} ${MOZJS_LIBRARIES})
-px_module(pacrunner_natus          "${NATUS_FOUND}"  ${BIPR} ${NATUS_LIBRARIES})
-px_module(pacrunner_webkit         "${WEBKIT_FOUND}" ${BIPR} ${WEBKIT_LIBRARIES})
+px_module(pacrunner_natus          0                 ${BIPR} ${NATUS_LIBRARIES})
+px_module(pacrunner_webkit         0                 ${BIPR} ${WEBKIT_LIBRARIES})
 px_module(wpad_dns_alias           1                 1)
 message("")
diff --git a/libproxy/modules/config_gnome3.cpp b/libproxy/modules/config_gnome3.cpp
index b4424e6..1f2dd2a 100644
--- a/libproxy/modules/config_gnome3.cpp
+++ b/libproxy/modules/config_gnome3.cpp
@@ -27,12 +27,79 @@
 #include <sys/wait.h>     // For waitpid()
 #include <signal.h>       // For kill()
 #include <string.h>       // For memset() [used in FD_ZERO() on Solaris]
+#include <filesystem>
 
 #include "../extension_config.hpp"
 using namespace libproxy;
 
 #define BUFFERSIZE 10240
 
+#if defined(_MSC_VER)
+#  if defined(_M_X64) || defined (_M_AMD64)
+#    define DEBIAN_LIB_ARCH_DIR "x86_64-linux-gnu"
+#  elif defined(_M_ARM) || defined(_M_ARM_ARMV7VE) || defined(_M_ARM_FP)
+#    if defined(__ARM_EABI__) && defined(__ARM_PCS_VFP)
+#      define DEBIAN_LIB_ARCH_DIR "arm-linux-gnueabihf"
+#    elif defined(__ARM_EABI__)
+#      define DEBIAN_LIB_ARCH_DIR "arm-linux-gnueabi"
+#    else
+#      define DEBIAN_LIB_ARCH_DIR "arm-linux-gnu"
+#    endif
+#  elif defined(_M_ARM64)
+#    define DEBIAN_LIB_ARCH_DIR "aarch64-linux-gnu"
+#  endif
+#elif defined(__GNUC__)
+#  if !defined(__LITTLE_ENDIAN__) && !defined(__BIG_ENDIAN__)
+#    if (defined(__BYTE_ORDER__)  && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__) || \
+       (defined(__BYTE_ORDER) && __BYTE_ORDER == __BIG_ENDIAN) || \
+       defined(__ARMEB__) || defined(__THUMBEB__) || defined(__AARCH64EB__)
+#      define __BIG_ENDIAN__
+#    elif (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__) || \
+       (defined(__BYTE_ORDER) && __BYTE_ORDER == __LITTLE_ENDIAN) || \
+       defined(__ARMEL__) || defined(__THUMBEL__) || defined(__AARCH64EL__)
+#      define __LITTLE_ENDIAN__
+#    endif
+#  endif
+#  if defined(__x86_64__) || defined(__amd64__)
+#    define DEBIAN_LIB_ARCH_DIR "x86_64-linux-gnu"
+#  elif defined(__arm__)
+#    if defined(__ARM_EABI__) && defined(__ARM_PCS_VFP)
+#      if defined(__BIG_ENDIAN__)
+#        define DEBIAN_LIB_ARCH_DIR "armeb-linux-gnueabihf"
+#      elif defined(__LITTLE_ENDIAN__)
+#        define DEBIAN_LIB_ARCH_DIR "arm-linux-gnueabihf"
+#      endif
+#    elif defined(__ARM_EABI__)
+#      if defined(__BIG_ENDIAN__)
+#        define DEBIAN_LIB_ARCH_DIR "armeb-linux-gnueabi"
+#      elif defined(__LITTLE_ENDIAN__)
+#        define DEBIAN_LIB_ARCH_DIR "arm-linux-gnueabi"
+#      endif
+#    else
+#      define DEBIAN_LIB_ARCH_DIR "arm-linux-gnu"
+#    endif
+#  elif defined(__aarch64__)
+#    if defined(__ILP32__)
+#      if defined(__BIG_ENDIAN__)
+#        define DEBIAN_LIB_ARCH_DIR "aarch64_be-linux-gnu_ilp32"
+#      elif defined(__LITTLE_ENDIAN__)
+#        define DEBIAN_LIB_ARCH_DIR "aarch64-linux-gnu_ilp32"
+#      endif
+#    elif defined(__LP64__)
+#      if defined(__BIG_ENDIAN__)
+#        define DEBIAN_LIB_ARCH_DIR "aarch64_be-linux-gnu"
+#      elif defined(__LITTLE_ENDIAN__)
+#        define DEBIAN_LIB_ARCH_DIR "aarch64-linux-gnu"
+#      endif
+#    endif
+#  endif
+#endif
+
+#define PXGSETTINGS_LIBEXEC_PATH "/usr/libexec/pxgsettings"
+#define PXGSETTINGS_LIB64_PATH "/usr/lib64/pxgsettings"
+#define PXGSETTINGS_LIB_PATH "/usr/lib/pxgsettings"
+#define PXGSETTINGS_DEBIAN_DIR "/usr/lib/" DEBIAN_LIB_ARCH_DIR "/libproxy"
+
 #define PROXY_MODE			"org.gnome.system.proxy/mode"
 #define PROXY_USE_AUTHENTICATION	"org.gnome.system.proxy.http/use-authentication"
 #define PROXY_AUTH_PASSWORD		"org.gnome.system.proxy.http/authentication-password"
@@ -131,11 +141,25 @@ public:
 		// Build the command
 		int count;
 		struct stat st;
-		string cmd = LIBEXECDIR "/pxgsettings";
-		const char *pxgconf = getenv("PX_GSETTINGS");
-
-		if (pxgconf)
-			cmd = string (pxgconf);
+		string cmd = [&]() -> string {
+			const char *pxgconf = getenv("PX_GSETTINGS");
+			if (pxgconf) {
+				return pxgconf;
+			} else if (!stat(PXGSETTINGS_LIBEXEC_PATH, &st)) {
+				return PXGSETTINGS_LIBEXEC_PATH;
+			} else if (!stat(PXGSETTINGS_LIB64_PATH, &st)) {
+				return PXGSETTINGS_LIB64_PATH;
+			} else if (!stat(PXGSETTINGS_LIB_PATH, &st)) {
+				return PXGSETTINGS_LIB_PATH;
+			}
+			namespace fs = std::filesystem;
+			for (const auto &p : fs::recursive_directory_iterator(PXGSETTINGS_DEBIAN_DIR)) {
+				if (p.path().filename() == "pxgsettings") {
+					return p.path();
+				}
+			}
+			return LIBEXECDIR "/pxgsettings";
+		}();
 
 		if (stat(cmd.c_str(), &st))
 			throw runtime_error ("Unable to open gsettings helper!");
@@ -156,7 +180,7 @@ public:
 		}
 
 		// Read in our initial data
-		while (!this->had_initial_values)
+		//while (!this->had_initial_values)
 			this->read_data();
 	}
 
diff --git a/libproxy/proxy.cpp b/libproxy/proxy.cpp
index 5db3033..c1bddab 100644
--- a/libproxy/proxy.cpp
+++ b/libproxy/proxy.cpp
@@ -158,12 +158,14 @@ proxy_factory::proxy_factory() {
 	for (int i=0 ; builtin_modules[i] ; i++)
 		this->mm.load_builtin(builtin_modules[i]);
 
+#if 0
 	// Load all modules
 	module_dir = getenv("PX_MODULE_PATH");
 	if (!module_dir)
 		module_dir = MODULEDIR;
 	this->mm.load_dir(module_dir);
 	this->mm.load_dir(module_dir, false);
+#endif
 
 	this->debug  = (getenv("_PX_DEBUG") != NULL);
 
