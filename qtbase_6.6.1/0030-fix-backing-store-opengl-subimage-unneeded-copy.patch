diff --git a/src/gui/rhi/qrhigles2.cpp b/src/gui/rhi/qrhigles2.cpp
index 02138d7fb7..6d89b9d228 100644
--- a/src/gui/rhi/qrhigles2.cpp
+++ b/src/gui/rhi/qrhigles2.cpp
@@ -2224,13 +2224,21 @@ void QRhiGles2::enqueueSubresUpload(QGles2Texture *texD, QGles2CommandBuffer *cb
     if (!subresDesc.image().isNull()) {
         QImage img = subresDesc.image();
         QSize size = img.size();
+        static const int bytesPerPixel = 4;
+        const int strideInPixels = img.bytesPerLine() / bytesPerPixel;
+        const bool hasUnpackRowLength = !ctx->isOpenGLES() || ctx->format().majorVersion() >= 3;
         QGles2CommandBuffer::Command &cmd(cbD->commands.get());
         cmd.cmd = QGles2CommandBuffer::Command::SubImage;
         if (!subresDesc.sourceSize().isEmpty() || !subresDesc.sourceTopLeft().isNull()) {
             const QPoint sp = subresDesc.sourceTopLeft();
             if (!subresDesc.sourceSize().isEmpty())
                 size = subresDesc.sourceSize();
-            img = img.copy(sp.x(), sp.y(), size.width(), size.height());
+            if (hasUnpackRowLength || (strideInPixels == img.width() && size.width() == img.width())) {
+                const uchar *data = img.constBits() + ((sp.x() * img.depth()) >> 3) + sp.y() * img.bytesPerLine();
+                img = QImage(data, size.width(), size.height(), img.bytesPerLine(), img.format());
+            } else {
+                img = img.copy(sp.x(), sp.y(), size.width(), size.height());
+            }
         }
         cmd.args.subImage.target = texD->target;
         cmd.args.subImage.texture = texD->texture;
@@ -2244,7 +2252,7 @@ void QRhiGles2::enqueueSubresUpload(QGles2Texture *texD, QGles2CommandBuffer *cb
         cmd.args.subImage.glformat = texD->glformat;
         cmd.args.subImage.gltype = texD->gltype;
         cmd.args.subImage.rowStartAlign = 4;
-        cmd.args.subImage.rowLength = 0;
+        cmd.args.subImage.rowLength = hasUnpackRowLength ? strideInPixels : 0;
         cmd.args.subImage.data = cbD->retainImage(img);
     } else if (!rawData.isEmpty() && isCompressed) {
         const int depth = qMax(1, texD->m_depth);
