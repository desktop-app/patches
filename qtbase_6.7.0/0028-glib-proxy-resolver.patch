diff --git a/src/network/CMakeLists.txt b/src/network/CMakeLists.txt
index c4e0324deb..b47b86356a 100644
--- a/src/network/CMakeLists.txt
+++ b/src/network/CMakeLists.txt
@@ -272,7 +272,15 @@ qt_internal_extend_target(Network CONDITION APPLE
         kernel/qnetworkproxy_darwin.cpp
 )
 
-qt_internal_extend_target(Network CONDITION QT_FEATURE_libproxy AND UNIX AND NOT MACOS
+qt_internal_extend_target(Network CONDITION QT_FEATURE_glib AND TARGET GLIB2::GOBJECT AND TARGET GLIB2::GIO AND UNIX AND NOT MACOS
+    SOURCES
+        kernel/qnetworkproxy_glib.cpp
+    LIBRARIES
+        GLIB2::GOBJECT
+        GLIB2::GIO
+)
+
+qt_internal_extend_target(Network CONDITION QT_FEATURE_libproxy AND (NOT QT_FEATURE_glib OR NOT TARGET GLIB2::GIO) AND UNIX AND NOT MACOS
     SOURCES
         kernel/qnetworkproxy_libproxy.cpp
     LIBRARIES
@@ -285,7 +293,7 @@ qt_internal_extend_target(Network CONDITION ANDROID
         kernel/qnetworkproxy_android.cpp
 )
 
-qt_internal_extend_target(Network CONDITION UNIX AND NOT ANDROID AND NOT APPLE AND NOT QT_FEATURE_libproxy AND (UNIX OR WINRT)
+qt_internal_extend_target(Network CONDITION UNIX AND NOT ANDROID AND NOT APPLE AND NOT QT_FEATURE_libproxy AND (NOT QT_FEATURE_glib OR NOT TARGET GLIB2::GIO) AND (UNIX OR WINRT)
     SOURCES
         kernel/qnetworkproxy_generic.cpp
 )
diff --git a/src/network/kernel/qnetworkproxy_glib.cpp b/src/network/kernel/qnetworkproxy_glib.cpp
new file mode 100644
index 0000000000..c2b169242a
--- /dev/null
+++ b/src/network/kernel/qnetworkproxy_glib.cpp
@@ -0,0 +1,199 @@
+// Copyright (C) 2016 The Qt Company Ltd.
+// Copyright (C) 2017 Intel Corporation.
+// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
+
+#include "qnetworkproxy.h"
+
+#ifndef QT_NO_NETWORKPROXY
+
+#include <QtCore/QByteArray>
+#include <QtCore/QMutex>
+#include <QtCore/QSemaphore>
+#include <QtCore/QUrl>
+#include <QtCore/private/qeventdispatcher_unix_p.h>
+#include <QtCore/private/qthread_p.h>
+#include <QtCore/qapplicationstatic.h>
+
+#undef signals
+#include <gio/gio.h>
+
+QT_BEGIN_NAMESPACE
+
+using namespace Qt::StringLiterals;
+
+static bool isThreadingNeeded()
+{
+    // libproxy is not thread-safe
+    return QLatin1StringView(G_OBJECT_TYPE_NAME(g_proxy_resolver_get_default())) == "GLibproxyResolver"_L1;
+}
+
+class QGProxyResolverWrapper : public QDaemonThread
+{
+    Q_OBJECT
+public:
+    QGProxyResolverWrapper();
+    ~QGProxyResolverWrapper();
+
+    QList<QUrl> getProxies(const QUrl &url);
+
+private:
+    struct Data {
+        // we leave the conversion to/from QUrl to the calling thread
+        const char *url;
+        char **proxies;
+        QSemaphore replyReady;
+    };
+
+    void run() override;
+
+    QMutex mutex;
+    QSemaphore requestReady;
+    Data *request;
+};
+
+Q_APPLICATION_STATIC(QGProxyResolverWrapper, gProxyResolverWrapper)
+
+QGProxyResolverWrapper::QGProxyResolverWrapper()
+{
+    if (isThreadingNeeded()) {
+        setEventDispatcher(new QEventDispatcherUNIX);   // don't allow the Glib one
+        start();
+    }
+}
+
+QGProxyResolverWrapper::~QGProxyResolverWrapper()
+{
+    if (isRunning()) {
+        requestInterruption();
+        requestReady.release();
+        wait();
+    }
+}
+
+/*
+    Gets the list of proxies from GProxyResolver, converted to QUrl list.
+    Apply thread-safety, though its documentation says otherwise,
+    libproxy (which may be used by GProxyResolver) isn't thread-safe.
+*/
+QList<QUrl> QGProxyResolverWrapper::getProxies(const QUrl &url)
+{
+    QByteArray encodedUrl = url.toEncoded();
+    Data data;
+    data.url = encodedUrl.constData();
+
+    {
+        QMutexLocker locker(&mutex);
+        if (isRunning()) {
+            // threaded mode
+            // it's safe to write to request because we hold the mutex:
+            // our aux thread is blocked waiting for work and no other thread
+            // could have got here
+            request = &data;
+            requestReady.release();
+
+            // wait for the reply
+            data.replyReady.acquire();
+        } else {
+            // non-threaded mode
+            data.proxies = g_proxy_resolver_lookup(g_proxy_resolver_get_default(),
+                                                   data.url,
+                                                   nullptr,
+                                                   nullptr);
+        }
+    }
+
+    QList<QUrl> ret;
+    if (data.proxies) {
+        for (int i = 0; data.proxies[i]; i++) {
+            ret.append(QUrl::fromEncoded(data.proxies[i]));
+            free(data.proxies[i]);
+        }
+        free(data.proxies);
+    }
+    return ret;
+}
+
+void QGProxyResolverWrapper::run()
+{
+    forever {
+        requestReady.acquire();
+        if (isInterruptionRequested())
+            break;
+        request->proxies = g_proxy_resolver_lookup(g_proxy_resolver_get_default(),
+                                                   request->url,
+                                                   nullptr,
+                                                   nullptr);
+        request->replyReady.release();
+    }
+}
+
+QList<QNetworkProxy> QNetworkProxyFactory::systemProxyForQuery(const QNetworkProxyQuery &query)
+{
+    QList<QNetworkProxy> proxyList;
+
+    QUrl queryUrl;
+    QNetworkProxy::Capabilities requiredCapabilities(0);
+    switch (query.queryType()) {
+    //URL requests are directly supported by GProxyResolver
+    case QNetworkProxyQuery::UrlRequest:
+        queryUrl = query.url();
+        break;
+    // fake URLs to get GProxyResolver to tell us the SOCKS proxy
+    case QNetworkProxyQuery::TcpSocket:
+        queryUrl.setScheme(QStringLiteral("tcp"));
+        queryUrl.setHost(query.peerHostName());
+        queryUrl.setPort(query.peerPort());
+        requiredCapabilities |= QNetworkProxy::TunnelingCapability;
+        break;
+    case QNetworkProxyQuery::UdpSocket:
+        queryUrl.setScheme(QStringLiteral("udp"));
+        queryUrl.setHost(query.peerHostName());
+        queryUrl.setPort(query.peerPort());
+        requiredCapabilities |= QNetworkProxy::UdpTunnelingCapability;
+        break;
+    default:
+        proxyList.append(QNetworkProxy(QNetworkProxy::NoProxy));
+        return proxyList;
+    }
+
+    const QList<QUrl> rawProxies = gProxyResolverWrapper()->getProxies(queryUrl);
+
+    bool haveDirectConnection = false;
+    for (const QUrl& url : rawProxies) {
+        QNetworkProxy::ProxyType type;
+        const QString scheme = url.scheme();
+        if (scheme == "http"_L1) {
+            type = QNetworkProxy::HttpProxy;
+        } else if (scheme == "socks"_L1 || scheme == "socks5"_L1) {
+            type = QNetworkProxy::Socks5Proxy;
+        } else if (scheme == "ftp"_L1) {
+            type = QNetworkProxy::FtpCachingProxy;
+        } else if (scheme == "direct"_L1) {
+            type = QNetworkProxy::NoProxy;
+            haveDirectConnection = true;
+        } else {
+            continue; //unsupported proxy type e.g. socks4
+        }
+
+        QNetworkProxy proxy(type,
+            url.host(QUrl::EncodeUnicode),
+            url.port(0),
+            url.userName(QUrl::FullyDecoded),
+            url.password(QUrl::FullyDecoded));
+
+        if ((proxy.capabilities() & requiredCapabilities) == requiredCapabilities)
+            proxyList.append(proxy);
+    }
+
+    // fallback is direct connection
+    if (proxyList.isEmpty() || !haveDirectConnection)
+        proxyList.append(QNetworkProxy(QNetworkProxy::NoProxy));
+
+    return proxyList;
+}
+
+QT_END_NAMESPACE
+
+#include "qnetworkproxy_glib.moc"
+
+#endif
