diff --git a/src/gui/painting/qbackingstoredefaultcompositor.cpp b/src/gui/painting/qbackingstoredefaultcompositor.cpp
index c1452ca768..9095152e45 100644
--- a/src/gui/painting/qbackingstoredefaultcompositor.cpp
+++ b/src/gui/painting/qbackingstoredefaultcompositor.cpp
@@ -39,7 +39,7 @@ QRhiTexture *QBackingStoreDefaultCompositor::toTexture(const QPlatformBackingSto
     return toTexture(backingStore->toImage(), rhi, resourceUpdates, dirtyRegion, flags);
 }
 
-QRhiTexture *QBackingStoreDefaultCompositor::toTexture(const QImage &sourceImage,
+QRhiTexture *QBackingStoreDefaultCompositor::toTexture(QImage image,
                                                        QRhi *rhi,
                                                        QRhiResourceUpdateBatch *resourceUpdates,
                                                        const QRegion &dirtyRegion,
@@ -56,8 +56,6 @@ QRhiTexture *QBackingStoreDefaultCompositor::toTexture(const QImage &sourceImage
         return nullptr;
     }
 
-    QImage image = sourceImage;
-
     bool needsConversion = false;
     *flags = {};
 
@@ -99,8 +97,6 @@ QRhiTexture *QBackingStoreDefaultCompositor::toTexture(const QImage &sourceImage
 
     if (needsConversion)
         image = image.convertToFormat(QImage::Format_RGBA8888);
-    else
-        image.detach(); // if it was just wrapping data, that's no good, we need ownership, so detach
 
     if (resized) {
         if (!m_texture)
@@ -508,7 +504,7 @@ QPlatformBackingStore::FlushResult QBackingStoreDefaultCompositor::flush(QPlatfo
             const QImage::Format format = QImage::toImageFormat(graphicsBuffer->format());
             const QSize size = graphicsBuffer->size();
             QImage wrapperImage(graphicsBuffer->data(), size.width(), size.height(), graphicsBuffer->bytesPerLine(), format);
-            toTexture(wrapperImage, rhi, resourceUpdates, scaledRegion(region, sourceDevicePixelRatio, offset), &flags);
+            toTexture(std::move(wrapperImage), rhi, resourceUpdates, scaledRegion(region, sourceDevicePixelRatio, offset), &flags);
             gotTextureFromGraphicsBuffer = true;
             graphicsBuffer->unlock();
             if (graphicsBuffer->origin() == QPlatformGraphicsBuffer::OriginBottomLeft)
diff --git a/src/gui/painting/qbackingstoredefaultcompositor_p.h b/src/gui/painting/qbackingstoredefaultcompositor_p.h
index c5a8ffd328..a3ef7ac75c 100644
--- a/src/gui/painting/qbackingstoredefaultcompositor_p.h
+++ b/src/gui/painting/qbackingstoredefaultcompositor_p.h
@@ -55,7 +55,7 @@ private:
     Q_DECLARE_FLAGS(UpdateQuadDataOptions, UpdateQuadDataOption)
 
     void ensureResources(QRhiResourceUpdateBatch *resourceUpdates, QRhiRenderPassDescriptor *rpDesc);
-    QRhiTexture *toTexture(const QImage &image,
+    QRhiTexture *toTexture(QImage image,
                            QRhi *rhi,
                            QRhiResourceUpdateBatch *resourceUpdates,
                            const QRegion &dirtyRegion,
