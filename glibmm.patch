diff --git a/gio/src/dbusconnection.ccg b/gio/src/dbusconnection.ccg
index f2f60355..b0726f76 100644
--- a/gio/src/dbusconnection.ccg
+++ b/gio/src/dbusconnection.ccg
@@ -637,8 +637,9 @@ void Connection::call(
   // and deleted in the callback.
   SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);
 
-  g_dbus_connection_call(gobj(), bus_name.c_str(), object_path.c_str(),
-    interface_name.c_str(), method_name.c_str(),
+  g_dbus_connection_call(gobj(),
+    (bus_name.empty() ? 0 : bus_name.c_str()),
+    object_path.c_str(), interface_name.c_str(), method_name.c_str(),
     const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
     static_cast<GDBusCallFlags>(flags), timeout_msec,
     Glib::unwrap(cancellable), &SignalProxy_async_callback, slot_copy);
@@ -661,8 +662,9 @@ void Connection::call(
   // and deleted in the callback.
   SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);
 
-  g_dbus_connection_call(gobj(), bus_name.c_str(), object_path.c_str(),
-    interface_name.c_str(), method_name.c_str(),
+  g_dbus_connection_call(gobj(),
+    (bus_name.empty() ? 0 : bus_name.c_str()),
+    object_path.c_str(), interface_name.c_str(), method_name.c_str(),
     const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
     static_cast<GDBusCallFlags>(flags), timeout_msec, 0,
     &SignalProxy_async_callback, slot_copy);
@@ -682,8 +684,9 @@ Glib::VariantContainerBase Connection::call_sync(
   GError* gerror = 0;
 
   GVariant* const gvariant =
-    g_dbus_connection_call_sync(gobj(), bus_name.c_str(), object_path.c_str(),
-    interface_name.c_str(), method_name.c_str(),
+    g_dbus_connection_call_sync(gobj(),
+    (bus_name.empty() ? 0 : bus_name.c_str()),
+    object_path.c_str(), interface_name.c_str(), method_name.c_str(),
     const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
     static_cast<GDBusCallFlags>(flags), timeout_msec,
     Glib::unwrap(cancellable), &gerror);
@@ -708,8 +711,9 @@ Glib::VariantContainerBase Connection::call_sync(
   GError* gerror = 0;
 
   GVariant* const gvariant =
-    g_dbus_connection_call_sync(gobj(), bus_name.c_str(), object_path.c_str(),
-    interface_name.c_str(), method_name.c_str(),
+    g_dbus_connection_call_sync(gobj(),
+    (bus_name.empty() ? 0 : bus_name.c_str()),
+    object_path.c_str(), interface_name.c_str(), method_name.c_str(),
     const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
     static_cast<GDBusCallFlags>(flags), timeout_msec, 0, &gerror);
 
@@ -739,7 +743,8 @@ void Connection::call(
   // and deleted in the callback.
   SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);
 
-  g_dbus_connection_call_with_unix_fd_list(gobj(), bus_name.c_str(),
+  g_dbus_connection_call_with_unix_fd_list(gobj(),
+    (bus_name.empty() ? 0 : bus_name.c_str()),
     object_path.c_str(), interface_name.c_str(), method_name.c_str(),
     const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
     static_cast<GDBusCallFlags>(flags), timeout_msec, Glib::unwrap(fd_list),
@@ -764,7 +769,8 @@ void Connection::call(
   // and deleted in the callback.
   SlotAsyncReady* slot_copy = new SlotAsyncReady(slot);
 
-  g_dbus_connection_call_with_unix_fd_list(gobj(), bus_name.c_str(),
+  g_dbus_connection_call_with_unix_fd_list(gobj(),
+    (bus_name.empty() ? 0 : bus_name.c_str()),
     object_path.c_str(), interface_name.c_str(), method_name.c_str(),
     const_cast<GVariant*>(parameters.gobj()), reply_type.gobj(),
     static_cast<GDBusCallFlags>(flags), timeout_msec, Glib::unwrap(fd_list),
@@ -781,15 +787,12 @@ void Connection::emit_signal(
 {
   GError* gerror = 0;
 
-  // Strings are checked to see if they are empty so that NULL can be passed
-  // for those strings to the C API.  This is done because some strings such as
-  // the bus name can be NULL in the C API meaning that the signal should be
-  // emitted to all the listeners.
+  // destination_bus_name is checked to see if it is empty so that nullptr can be passed
+  // to the C API. This is done because the bus name can be nullptr in the C API,
+  // meaning that the signal should be emitted to all the listeners.
   g_dbus_connection_emit_signal(gobj(),
     (destination_bus_name.empty() ? 0 : destination_bus_name.c_str()),
-    (object_path.empty()? 0 : object_path.c_str()),
-    (interface_name.empty() ? 0 : interface_name.c_str()),
-    (signal_name.empty() ? 0 : signal_name.c_str()),
+    object_path.c_str(), interface_name.c_str(), signal_name.c_str(),
     const_cast<GVariant*>(parameters.gobj()), &gerror);
 
   if(gerror)
@@ -807,8 +810,12 @@ guint Connection::signal_subscribe(
 {
   SlotSignal* slot_copy = new SlotSignal(slot);
 
-  return g_dbus_connection_signal_subscribe(gobj(), sender.c_str(),
-    interface_name.c_str(), member.c_str(), object_path.c_str(), arg0.c_str(),
+  return g_dbus_connection_signal_subscribe(gobj(),
+    (sender.empty() ? nullptr : sender.c_str()),
+    (interface_name.empty() ? nullptr : interface_name.c_str()),
+    (member.empty() ? nullptr : member.c_str()),
+    (object_path.empty() ? nullptr : object_path.c_str()),
+    (arg0.empty() ? nullptr : arg0.c_str()),
     static_cast<GDBusSignalFlags>(flags),
     &DBusConnection_Signal_giomm_callback, slot_copy,
     &DBusConnection_Signal_giomm_callback_destroy);
diff --git a/gio/src/dbusconnection.hg b/gio/src/dbusconnection.hg
index 065db96c..ff226fd1 100644
--- a/gio/src/dbusconnection.hg
+++ b/gio/src/dbusconnection.hg
@@ -1,5 +1,3 @@
-// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-
-
 /* Copyright (C) 2010 The giomm Development Team
  *
  * This library is free software; you can redistribute it and/or
@@ -627,7 +625,7 @@ public:
    * method or <tt>0</tt> if not passing parameters.
    * @param slot A SlotAsyncReady to call when the request is satisfied.
    * @param cancellable A Cancellable.
-   * @param bus_name A unique or well-known bus name or <tt>0</tt> if the
+   * @param bus_name A unique or well-known bus name or an empty string if the
    * connection is not a message bus connection.
    * @param timeout_msec The timeout in milliseconds, -1 to use the default
    * timeout or G_MAXINT for no timeout.
@@ -693,7 +691,7 @@ public:
    * @param parameters A Glib::VariantContainerBase tuple with parameters for the
    * method or <tt>0</tt> if not passing parameters.
    * @param cancellable A Cancellable.
-   * @param bus_name A unique or well-known bus name or <tt>0</tt> if the
+   * @param bus_name A unique or well-known bus name or an empty string if the
    * connection is not a message bus connection.
    * @param timeout_msec The timeout in milliseconds, -1 to use the default
    * timeout or G_MAXINT for no timeout.
@@ -744,7 +742,7 @@ public:
    * @param slot A SlotAsyncReady to call when the request is satisfied.
    * @param cancellable A Cancellable.
    * @param fd_list A UnixFDList.
-   * @param bus_name A unique or well-known bus name or <tt>0</tt> if the
+   * @param bus_name A unique or well-known bus name or an empty string if the
    * connection is not a message bus connection.
    * @param timeout_msec The timeout in milliseconds, -1 to use the default
    * timeout or G_MAXINT for no timeout.
@@ -801,7 +799,7 @@ public:
       const Glib::RefPtr<Cancellable>&    cancellable{.?},
       const Glib::RefPtr<UnixFDList>&     fd_list{.},
       Glib::RefPtr<UnixFDList>&           out_fd_list{.>>},
-      const Glib::ustring&                bus_name{.} = Glib::ustring(),
+      const Glib::ustring&                bus_name{.NULL} = Glib::ustring(),
       int                                 timeout_msec{.} = -1,
       CallFlags                           flags{.} = Gio::DBus::CALL_FLAGS_NONE,
       const Glib::VariantType&            reply_type{.} = Glib::VariantType()
@@ -818,7 +816,7 @@ public:
    * @param interface_name D-Bus interface to emit a signal on.
    * @param signal_name The name of the signal to emit.
    * @param destination_bus_name The unique bus name for the destination for
-   * the signal or <tt>0</tt> to emit to all listeners.
+   * the signal or an empty string to emit to all listeners.
    * @param parameters A Glib::VariantContainerBase tuple with parameters for the
    * signal or <tt>0</tt> if not passing parameters.
    * @throw Glib::Error.
diff --git a/glib/glibmm/objectbase.cc b/glib/glibmm/objectbase.cc
index 140816a4..c7add7fe 100644
--- a/glib/glibmm/objectbase.cc
+++ b/glib/glibmm/objectbase.cc
@@ -1,6 +1,3 @@
-// -*- c++ -*-
-/* $Id$ */
-
 /* Copyright 2002 The gtkmm Development Team
  *
  * This library is free software; you can redistribute it and/or
@@ -46,7 +43,7 @@ namespace Glib
 
 // static data members
 ObjectBase::extra_object_base_data_type ObjectBase::extra_object_base_data;
-std::auto_ptr<Threads::Mutex> ObjectBase::extra_object_base_data_mutex(new Threads::Mutex());
+Threads::Mutex* ObjectBase::extra_object_base_data_mutex = new Threads::Mutex();
 
 ObjectBase::ObjectBase()
 :
diff --git a/glib/glibmm/objectbase.h b/glib/glibmm/objectbase.h
index 9c4c4e8e..2b81680e 100644
--- a/glib/glibmm/objectbase.h
+++ b/glib/glibmm/objectbase.h
@@ -30,7 +30,7 @@
 #include <sigc++/trackable.h>
 #include <typeinfo>
 #include <map> // Needed until the next ABI break.
-#include <memory> // auto_ptr, needed until the next ABI break.
+#include <memory> // Not used by ObjectBase any more, but user code may rely on it being here.
 
 #ifndef DOXYGEN_SHOULD_SKIP_THIS
 extern "C" { typedef struct _GObject GObject; }
@@ -208,10 +208,10 @@ typedef std::map<const ObjectBase*, ExtraObjectBaseData> extra_object_base_data_
 static extra_object_base_data_type extra_object_base_data;
 // ObjectBase instances may be used in different threads.
 // Accesses to extra_object_base_data must be thread-safe.
-// auto_ptr, because we don't want to include glibmm/threads.h in objectbase.h.
+// Threads::Mutex*, because we don't want to include glibmm/threads.h in objectbase.h.
 // threads.h must be the first included file that includes glib.h. That could cause
 // problems in files that directly or indirectly include objectbase.h.
-static std::auto_ptr<Threads::Mutex> extra_object_base_data_mutex;
+static Threads::Mutex* extra_object_base_data_mutex;
 
 public: //  is_derived_() must be public, so that overridden vfuncs and signal handlers can call it via ObjectBase.
 
diff --git a/glib/src/threads.hg b/glib/src/threads.hg
index 52bb4b41..fc035c0a 100644
--- a/glib/src/threads.hg
+++ b/glib/src/threads.hg
@@ -583,7 +583,7 @@ public:
    */
   inline void replace(T* data);
 
-  GPrivate* gobj() { return gobject_; }
+  GPrivate* gobj() { return &gobject_; }
 
 private:
   GPrivate gobject_;
diff --git a/glib/src/variant.ccg b/glib/src/variant.ccg
index a7c53524..05eba90e 100644
--- a/glib/src/variant.ccg
+++ b/glib/src/variant.ccg
@@ -149,7 +149,7 @@ void VariantContainerBase::get_child(VariantBase& child, gsize index) const
 // VariantContainerBase has no method variant_type()
 template<>
 VariantContainerBase VariantBase::cast_dynamic<VariantContainerBase>(const VariantBase& v)
-throw(std::bad_cast)
+noexcept(false)
 {
   if(!v.gobj())
   {
@@ -260,7 +260,7 @@ Glib::ustring Variant<Glib::ustring>::get() const
 // See http://library.gnome.org/devel/glib/unstable/glib-GVariant.html#g-variant-get-string
 template<>
 Variant<Glib::ustring> VariantBase::cast_dynamic< Variant<Glib::ustring> >(const VariantBase& v)
-throw(std::bad_cast)
+noexcept(false)
 {
   if(!v.gobj())
   {
@@ -309,7 +309,7 @@ Variant<std::string>::create(const std::string& data)
 // See http://library.gnome.org/devel/glib/unstable/glib-GVariant.html#g-variant-get-string
 template<>
 Variant<std::string> VariantBase::cast_dynamic< Variant<std::string> >(const VariantBase& v)
-throw(std::bad_cast)
+noexcept(false)
 {
   if(!v.gobj())
   {
diff --git a/glib/src/variant.hg b/glib/src/variant.hg
index 0cb1a827..7ce77ed4 100644
--- a/glib/src/variant.hg
+++ b/glib/src/variant.hg
@@ -25,6 +25,7 @@ _DEFS(glibmm,glib)
 #include <utility>
 #include <vector>
 #include <map>
+#include <tuple>
 #include <stdexcept>
 #include <typeinfo>
 
@@ -208,7 +209,7 @@ public:
     * @throws std::bad_cast if the Variant was not of the expected type.
     */
    template<class V_CastTo>
-   static V_CastTo cast_dynamic(const VariantBase& v) throw(std::bad_cast);
+   static V_CastTo cast_dynamic(const VariantBase& v) noexcept(false);
 
    _IGNORE(g_variant_dict_new)
 
@@ -236,7 +237,7 @@ private:
 
 template<class V_CastTo>
 V_CastTo VariantBase::cast_dynamic(const VariantBase& v)
-throw(std::bad_cast)
+noexcept(false)
 {
   if(!(v.gobj()))
   {
@@ -391,7 +392,7 @@ public:
 
 template<>
 VariantContainerBase VariantBase::cast_dynamic<VariantContainerBase>(const VariantBase& v)
-throw(std::bad_cast);
+noexcept(false);
 
 /** Template class used for the specialization of the Variant<> classes.
  * @newin{2,28}
@@ -554,7 +555,7 @@ public:
 
 template<>
 Variant<Glib::ustring> VariantBase::cast_dynamic< Variant<Glib::ustring> >(const VariantBase& v)
-throw(std::bad_cast);
+noexcept(false);
 
 /** Specialization of Variant containing a std::string, for variants of type
  * bytestring, object path, or signature.
@@ -603,7 +604,7 @@ public:
 
 template<>
 Variant<std::string> VariantBase::cast_dynamic< Variant<std::string> >(const VariantBase& v)
-throw(std::bad_cast);
+noexcept(false);
 
 /** Specialization of Variant containing a dictionary entry.  See also
  * Variant< std::map<K, V> >.
@@ -938,6 +939,71 @@ public:
   VariantIter get_iter() const;
 };
 
+/** Specialization of Variant containing a tuple.
+ * @newin{2,52}
+ * @ingroup Variant
+ */
+template <class... Types>
+class Variant<std::tuple<Types...>> : public VariantContainerBase
+{
+public:
+  using CppContainerType = std::tuple<Types...>;
+
+  /// Default constructor
+  Variant<std::tuple<Types...>>()
+  : VariantContainerBase()
+  {}
+
+  /** GVariant constructor.
+   * @param castitem The GVariant to wrap.
+   * @param take_a_reference Whether to take an extra reference of the GVariant
+   *        or not (not taking one could destroy the GVariant with the wrapper).
+   */
+  explicit Variant<std::tuple<Types...>>(GVariant* castitem, bool take_a_reference = false)
+  : VariantContainerBase(castitem, take_a_reference)
+  {}
+
+  /** Creates a new Variant containing a tuple.
+   * @param data The tuple to use for creation.
+   * @return The new Variant holding a tuple.
+   * @newin{2,52}
+   */
+  static Variant<std::tuple<Types...>> create(const std::tuple<Types...>& data);
+
+  /** Gets the VariantType.
+   * @return The VariantType.
+   * @newin{2,52}
+   */
+  static const VariantType& variant_type() G_GNUC_CONST;
+
+  /** Gets a specific element from the tuple.
+   * It is an error if @a index is greater than or equal to the number of
+   * elements in the tuple. See VariantContainerBase::get_n_children().
+   *
+   * @param index The index of the element.
+   * @return The tuple element at index @a index.
+   * @throw std::out_of_range
+   * @newin{2,52}
+   */
+  template<class T>
+  T get_child(gsize index) const;
+
+  template<class T>
+  Variant<T> get_child_variant(gsize index) const;
+
+  /** Gets the tuple of the Variant.
+   * @return The tuple.
+   * @newin{2,52}
+   */
+  std::tuple<Types...> get() const;
+
+  /** Gets a VariantIter of the Variant.
+   * @return The VariantIter.
+   * @newin{2,52}
+   */
+  VariantIter get_iter() const;
+};
+
 } // namespace Glib
 
 
@@ -1250,4 +1316,135 @@ VariantIter Variant< std::map<K, V> >::get_iter() const
   return VariantIter(g_iter);
 }
 
+/*---------------------Variant<std::tuple<class... Types>> --------------------*/
+
+// static
+template <class... Types>
+const VariantType& Variant<std::tuple<Types...>>::variant_type()
+{
+  std::vector<VariantType> types;
+  auto expander = [&types](const VariantType &type) mutable -> int
+  {
+    types.push_back(type);
+    return 0;
+  };
+
+  // expands the variadic template parameters
+  using swallow = int[]; // ensures left to right order
+  swallow{(expander(Variant<Types>::variant_type()))...};
+  static auto type = VariantType::create_tuple(types);
+
+  return type;
+}
+
+namespace detail
+{
+template <class Tuple, std::size_t... Is>
+void expand_tuple(std::vector<VariantBase> &variants, const Tuple & t,
+                  std::index_sequence<Is...>)
+{
+  using swallow = int[]; // ensures left to right order
+  auto expander = [&variants](const VariantBase &variant) -> int
+  {
+    variants.push_back(variant);
+    return 0;
+  };
+  (void)swallow {(expander(Variant<typename std::tuple_element<Is, Tuple>::type>::create(std::get<Is>(t))))...};
+}
+} // namespace detail
+
+template <class... Types>
+Variant<std::tuple<Types...>>
+Variant<std::tuple<Types...>>::create(const std::tuple<Types...>& data)
+{
+  // create a vector containing all tuple values as variants
+  std::vector<Glib::VariantBase> variants;
+  detail::expand_tuple(variants, data, std::index_sequence_for<Types...>{});
+
+  using var_ptr = GVariant*;
+  var_ptr var_array[sizeof... (Types)];
+
+  for (std::vector<VariantBase>::size_type i = 0; i < variants.size(); i++)
+    var_array[i] = const_cast<GVariant*>(variants[i].gobj());
+
+  Variant<std::tuple<Types...>> result = Variant<std::tuple<Types...>>(
+          g_variant_new_tuple(var_array, variants.size()));
+
+  return result;
+}
+
+template <class... Types>
+template <class T>
+T Variant<std::tuple<Types...>>::get_child(gsize index) const
+{
+  Variant<T> entry;
+  VariantContainerBase::get_child(entry, index);
+  return entry.get();
+}
+
+template <class... Types>
+template <class T>
+Variant<T> Variant<std::tuple<Types...>>::get_child_variant(gsize index) const
+{
+  Variant<T> entry;
+  VariantContainerBase::get_child(entry, index);
+  return entry;
+}
+
+namespace detail
+{
+// swallows any argument
+template <class T>
+constexpr int any_arg(T&& arg)
+{
+  (void)arg;
+  return 0;
+}
+
+template <class Tuple, std::size_t... Is>
+void assign_tuple(std::vector<VariantBase> &variants, Tuple & t, std::index_sequence<Is...>)
+{
+  int i = 0;
+  using swallow = int[]; // ensures left to right order
+  (void)swallow {(any_arg(std::get<Is>(t) = VariantBase::cast_dynamic<Variant<typename std::tuple_element<Is, Tuple>::type > >(variants[i++]).get()))...};
+}
+} // namespace detail
+
+template <class... Types>
+std::tuple<Types...> Variant<std::tuple<Types...>>::get() const
+{
+  std::tuple<Types...> data;
+  int i = 0;
+
+  std::vector<VariantBase> variants;
+  using swallow = int[]; // ensures left to right order
+  auto expander = [&variants, &i](const VariantBase &variant) -> int
+  {
+    variants.push_back(variant);
+    return i++;
+  };
+  swallow{(expander(get_child_variant<Types>(i)))...};
+  detail::assign_tuple(variants, data, std::index_sequence_for<Types...>{});
+
+  return data;
+}
+
+template< class... Types>
+VariantIter Variant<std::tuple<Types...>>::get_iter() const
+{
+  // Get the variant type of the elements.
+  VariantType element_variant_type =
+    Variant< std::tuple<Types...> >::variant_type();
+
+  // Get the variant type of the array.
+  VariantType array_variant_type = Variant< std::tuple<Types...> >::variant_type();
+
+  // Get the GVariantIter.
+  GVariantIter* g_iter = 0;
+  g_variant_get(const_cast<GVariant*>(gobj()),
+    reinterpret_cast<gchar*>(array_variant_type.gobj()), &g_iter);
+
+  return VariantIter(g_iter);
+}
+
 } // namespace Glib
