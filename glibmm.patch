diff --git a/glib/glibmm/object.cc b/glib/glibmm/object.cc
index 30703d7d..38a79a2e 100644
--- a/glib/glibmm/object.cc
+++ b/glib/glibmm/object.cc
@@ -30,7 +30,7 @@ namespace Glib
 {
 
 ConstructParams::ConstructParams(const Glib::Class& glibmm_class_)
-: glibmm_class(glibmm_class_), n_parameters(0), parameter_names(nullptr), parameter_values(nullptr)
+: glibmm_class(glibmm_class_), n_parameters(0), parameters(nullptr)
 {
 }
 
@@ -46,7 +46,7 @@ ConstructParams::ConstructParams(const Glib::Class& glibmm_class_)
  */
 ConstructParams::ConstructParams(
   const Glib::Class& glibmm_class_, const char* first_property_name, ...)
-: glibmm_class(glibmm_class_), n_parameters(0), parameter_names(nullptr), parameter_values(nullptr)
+: glibmm_class(glibmm_class_), n_parameters(0), parameters(nullptr)
 {
   va_list var_args;
   va_start(var_args, first_property_name);
@@ -69,26 +69,23 @@ ConstructParams::ConstructParams(
       break;
     }
 
-    if (n_parameters >= n_alloced_params) {
-      n_alloced_params += 8;
-      parameter_names = g_renew(const char*, parameter_names, n_alloced_params);
-      parameter_values = g_renew(GValue, parameter_values, n_alloced_params);
-    }
+    if (n_parameters >= n_alloced_params)
+      parameters = g_renew(GParameter, parameters, n_alloced_params += 8);
+
+    GParameter& param = parameters[n_parameters];
 
-    auto& param_name = parameter_names[n_parameters];
-    auto& param_value = parameter_values[n_parameters];
-    param_name = name;
-    param_value.g_type = 0;
+    param.name = name;
+    param.value.g_type = 0;
 
     // Fill the GValue with the current vararg, and move on to the next one.
-    g_value_init(&param_value, G_PARAM_SPEC_VALUE_TYPE(pspec));
-    G_VALUE_COLLECT(&param_value, var_args, 0, &collect_error);
+    g_value_init(&param.value, G_PARAM_SPEC_VALUE_TYPE(pspec));
+    G_VALUE_COLLECT(&param.value, var_args, 0, &collect_error);
 
     if (collect_error)
     {
       g_warning("Glib::ConstructParams::ConstructParams(): %s", collect_error);
       g_free(collect_error);
-      g_value_unset(&param_value);
+      g_value_unset(&param.value);
       break;
     }
 
@@ -102,13 +99,10 @@ ConstructParams::ConstructParams(
 
 ConstructParams::~ConstructParams() noexcept
 {
-  while (n_parameters > 0) {
-    auto& param_value = parameter_values[--n_parameters];
-    g_value_unset(&param_value);
-  }
+  while (n_parameters > 0)
+    g_value_unset(&parameters[--n_parameters].value);
 
-  g_free(parameter_names);
-  g_free(parameter_values);
+  g_free(parameters);
 }
 
 /**** Glib::Object_Class ***************************************************/
@@ -166,10 +160,10 @@ Object::Object()
     custom_class_init_finished();
   }
 
-  GObject* const new_object = g_object_new_with_properties(object_type, 0, nullptr, nullptr);
+  void* const new_object = g_object_newv(object_type, 0, nullptr);
 
   // Connect the GObject and Glib::Object instances.
-  ObjectBase::initialize(new_object);
+  ObjectBase::initialize(static_cast<GObject*>(new_object));
 }
 
 Object::Object(const Glib::ConstructParams& construct_params)
@@ -193,11 +187,11 @@ Object::Object(const Glib::ConstructParams& construct_params)
   // This works with custom types too, since those inherit the properties of
   // their base class.
 
-  GObject* const new_object =
-    g_object_new_with_properties(object_type, construct_params.n_parameters, construct_params.parameter_names, construct_params.parameter_values);
+  void* const new_object =
+    g_object_newv(object_type, construct_params.n_parameters, construct_params.parameters);
 
   // Connect the GObject and Glib::Object instances.
-  ObjectBase::initialize(new_object);
+  ObjectBase::initialize(static_cast<GObject*>(new_object));
 }
 
 Object::Object(GObject* castitem)
diff --git a/glib/glibmm/object.h b/glib/glibmm/object.h
index 4cb6ad91..2a1f7f2f 100644
--- a/glib/glibmm/object.h
+++ b/glib/glibmm/object.h
@@ -53,9 +53,8 @@ class GLIBMM_API GSigConnectionNode;
 
 /* ConstructParams::ConstructParams() takes a varargs list of properties
  * and values, like g_object_new() does.  This list will then be converted
- * to an array of parameter names and an array of parameter values,
- * for use with g_object_new_with_properties().  No overhead is
- * involved, since g_object_new() is just a wrapper around g_object_new_with_properties()
+ * to a GParameter array, for use with g_object_newv().  No overhead is
+ * involved, since g_object_new() is just a wrapper around g_object_newv()
  * as well.
  *
  * The advantage of an auxiliary ConstructParams object over g_object_new()
@@ -71,8 +70,7 @@ class GLIBMM_API ConstructParams
 public:
   const Glib::Class& glibmm_class;
   unsigned int n_parameters;
-  const char ** parameter_names;
-  GValue* parameter_values;
+  GParameter* parameters;
 
   explicit ConstructParams(const Glib::Class& glibmm_class_);
   ConstructParams(const Glib::Class& glibmm_class_, const char* first_property_name,
diff --git a/meson.build b/meson.build
index 2eefa135..0109a99d 100644
--- a/meson.build
+++ b/meson.build
@@ -109,12 +109,13 @@ sigcxx_req = '>= 3.0.0'
 glib_req = '>= 2.77.0'
 
 # There are pkg-config files for sigc++ and glib on MSVC, so just use that.
+dl_dep = cpp_compiler.find_library('dl', required : false)
 sigcxx_dep = dependency('sigc++-3.0', version: sigcxx_req)
 glib_dep = dependency('glib-2.0', version: glib_req)
 gobject_dep = dependency('gobject-2.0', version: glib_req)
 gmodule_dep = dependency('gmodule-2.0', version: glib_req)
 
-glibmm_build_dep = [sigcxx_dep, glib_dep, gobject_dep, gmodule_dep]
+glibmm_build_dep = [dl_dep, sigcxx_dep, glib_dep, gobject_dep, gmodule_dep]
 glibmm_requires = [
   'sigc++-3.0', sigcxx_req,
   'glib-2.0', glib_req,
diff --git a/tools/generate_wrap_init.pl.in b/tools/generate_wrap_init.pl.in
index 21b7b907..d03eec5e 100644
--- a/tools/generate_wrap_init.pl.in
+++ b/tools/generate_wrap_init.pl.in
@@ -206,6 +206,7 @@ print << "EOF";
 // Generated by generate_wrap_init.pl -- DO NOT MODIFY!
 
 #define GLIBMM_INCLUDED_FROM_WRAP_INIT_CC
+#include <dlfcn.h>
 #include <glibmm.h>
 #include <${parent_dir}/wrap_init.h>
 #include <glibmm/error.h>
@@ -361,8 +362,8 @@ foreach my $sub_namespace (sort keys %extra_namespaces)
       my ($cppname, $basename, @extra_namespace) = @{$i};
       if (@extra_namespace > 0 && $sub_namespace eq join("::", @extra_namespace))
       {
-        $message .= "  Glib::Error::register_domain(${basename}_quark(), &" .
-                    "${sub_namespace}::${cppname}::throw_func);\n";
+        $message .= "  if (const auto func = (decltype(&${basename}_quark)) dlsym(RTLD_DEFAULT, \"${basename}_quark\"))\n" .
+                    "    Glib::Error::register_domain(func(), &${sub_namespace}::${cppname}::throw_func);\n";
       }
     }
     print_with_guards($filename_header, $message) if $message;
@@ -387,8 +388,8 @@ foreach my $filename_header (sort keys %exceptions)
     my ($cppname, $basename, @extra_namespace) = @{$i};
     if (@extra_namespace == 0)
     {
-      $message .= "  Glib::Error::register_domain(${basename}_quark(), &" .
-                  "${cppname}::throw_func);\n";
+      $message .= "  if (const auto func = (decltype(&${basename}_quark)) dlsym(RTLD_DEFAULT, \"${basename}_quark\"))\n" .
+                  "    Glib::Error::register_domain(func(), &${cppname}::throw_func);\n";
     }
   }
   print_with_guards($filename_header, $message) if $message;
@@ -419,8 +420,8 @@ foreach my $filename_header (sort keys %objects)
   {
     my ($cppname, $basename, @extra_namespace) = @{$i};
     my $qualified_cppname = join("::", (@extra_namespace, $cppname));
-    $message .= "  Glib::wrap_register(${basename}_get_type(), &" .
-                "${qualified_cppname}_Class::wrap_new);\n";
+    $message .= "  if (const auto func = (decltype(&${basename}_get_type)) dlsym(RTLD_DEFAULT, \"${basename}_get_type\"))\n" .
+                "    Glib::wrap_register(func(), &${qualified_cppname}_Class::wrap_new);\n";
   }
   print_with_guards($filename_header, $message);
 }
diff --git a/tools/m4/base.m4 b/tools/m4/base.m4
index 45354752..a3dae03f 100644
--- a/tools/m4/base.m4
+++ b/tools/m4/base.m4
@@ -134,8 +134,17 @@ dnl also pre-pending an '_' to the pairs.  Finally, it converts all characters
 dnl to lowercase (with the translit), removing the first '_' (with substr) and
 dnl appending _get_type().  This works with regular types like GtkWidget, but
 dnl also multi-cap types like GdkGCFooBar or GdkFOOBar.
+
+define(`_GET_TYPE_FUNC_NAME',`dnl
+m4_translit(m4_substr(m4_patsubst(m4_patsubst(`$1',`[A-Z][A-Z]+',`_\&'),`[A-Z][a-z]',`_\&'),1),`[A-Z]',`[a-z]')_get_type`'dnl
+')
+
 define(`_GET_TYPE_FUNC',`dnl
-m4_translit(m4_substr(m4_patsubst(m4_patsubst(`$1',`[A-Z][A-Z]+',`_\&'),`[A-Z][a-z]',`_\&'),1),`[A-Z]',`[a-z]')_get_type()`'dnl
+[] {
+  if (const auto func = (decltype(&_GET_TYPE_FUNC_NAME($1))) dlsym(RTLD_DEFAULT, "_GET_TYPE_FUNC_NAME($1)"))
+    return func();
+  return GType();
+}()
 ')
 
 dnl Define a new diversion
@@ -337,6 +346,7 @@ _IMPORT(SECTION_CC_PRE_INCLUDES)
 
 _DEPRECATE_IFDEF_CLASS_CONFIG_START
 
+#include <dlfcn.h>
 #include <glibmm.h>
 
 #include <__MODULE__/__FILE__.h>
diff --git a/tools/m4/class_interface.m4 b/tools/m4/class_interface.m4
index 5243b265..7da9a316 100644
--- a/tools/m4/class_interface.m4
+++ b/tools/m4/class_interface.m4
@@ -86,7 +86,8 @@ const Glib::Interface_Class& __CPPNAME__`'_Class::init()
     class_init_func_ = &__CPPNAME__`'_Class::iface_init_function;
 
     // We can not derive from another interface, and it is not necessary anyway.
-    gtype_ = _LOWER(__CCAST__)_get_type();
+    if (const auto func = (decltype(&_LOWER(__CCAST__)_get_type)) dlsym(RTLD_DEFAULT, "_LOWER(__CCAST__)_get_type"))
+      gtype_ = func();
   }
 
   return *this;
diff --git a/tools/m4/class_opaque_refcounted.m4 b/tools/m4/class_opaque_refcounted.m4
index 544f772e..607ac795 100644
--- a/tools/m4/class_opaque_refcounted.m4
+++ b/tools/m4/class_opaque_refcounted.m4
@@ -115,7 +115,9 @@ GType __CPPNAME__::get_type()
 ifelse(__OPAQUE_FUNC_GTYPE__,,`dnl
   return _GET_TYPE_FUNC(__CNAME__);
 ',`dnl
-  return __OPAQUE_FUNC_GTYPE__`'();
+  if (const auto func = (decltype(&__OPAQUE_FUNC_GTYPE__)) dlsym(RTLD_DEFAULT, "__OPAQUE_FUNC_GTYPE__"))
+    return func();
+  return GType();
 ')dnl
 }
 
diff --git a/tools/m4/class_shared.m4 b/tools/m4/class_shared.m4
index 3ba0f32f..983f6924 100644
--- a/tools/m4/class_shared.m4
+++ b/tools/m4/class_shared.m4
@@ -175,10 +175,12 @@ ifdef(`__BOOL_ABI_AS_WITH_DERIVED_GTYPE__',`dnl
     class_init_func_ = &__CPPNAME__`'_Class::class_init_function;
 
     // Do not derive a GType, or use a derived class:
-    gtype_ = _LOWER(__CCAST__)_get_type();
+    if (const auto func = (decltype(&_LOWER(__CCAST__)_get_type)) dlsym(RTLD_DEFAULT, "_LOWER(__CCAST__)_get_type"))
+      gtype_ = func();
 ',`dnl
     // Do not derive a GType, or use a derived class:
-    gtype_ = _LOWER(__CCAST__)_get_type();
+    if (const auto func = (decltype(&_LOWER(__CCAST__)_get_type)) dlsym(RTLD_DEFAULT, "_LOWER(__CCAST__)_get_type"))
+      gtype_ = func();
 ')',`dnl not __BOOL_DO_NOT_DERIVE_GTYPE__
     // Glib::Class has to know the class init function to clone custom types.
     class_init_func_ = &__CPPNAME__`'_Class::class_init_function;
@@ -188,7 +190,8 @@ ifdef(`__BOOL_ABI_AS_WITH_DERIVED_GTYPE__',`dnl
     //CppClassParent::CppObjectType::get_type();
 
     // Create the wrapper type, with the same class/instance size as the base type.
-    register_derived_type(_LOWER(__CCAST__)_get_type());
+    if (const auto func = (decltype(&_LOWER(__CCAST__)_get_type)) dlsym(RTLD_DEFAULT, "_LOWER(__CCAST__)_get_type"))
+      register_derived_type(func());
 
     // Add derived versions of interfaces, if the C type implements any interfaces:
 _IMPORT(SECTION_CC_IMPLEMENTS_INTERFACES)
@@ -209,10 +212,12 @@ ifdef(`__BOOL_ABI_AS_WITH_DERIVED_GTYPE__',`dnl
     class_init_func_ = &__CPPNAME__`'_Class::class_init_function;
 
     // Do not derive a GType, or use a derived class:
-    gtype_ = _LOWER(__CCAST__)_get_type();
+    if (const auto func = (decltype(&_LOWER(__CCAST__)_get_type)) dlsym(RTLD_DEFAULT, "_LOWER(__CCAST__)_get_type"))
+      gtype_ = func();
 ',`dnl
     // Do not derive a GType, or use a derived class:
-    gtype_ = _LOWER(__CCAST__)_get_type();
+    if (const auto func = (decltype(&_LOWER(__CCAST__)_get_type)) dlsym(RTLD_DEFAULT, "_LOWER(__CCAST__)_get_type"))
+      gtype_ = func();
 ')',`dnl
     // Glib::Class has to know the class init function to clone custom types.
     class_init_func_ = &__CPPNAME__`'_Class::class_init_function;
@@ -222,7 +227,8 @@ ifdef(`__BOOL_ABI_AS_WITH_DERIVED_GTYPE__',`dnl
     //CppClassParent::CppObjectType::get_type();
 
     // Create the wrapper type, with the same class/instance size as the base type.
-    register_derived_type(_LOWER(__CCAST__)_get_type(), module);
+    if (const auto func = (decltype(&_LOWER(__CCAST__)_get_type)) dlsym(RTLD_DEFAULT, "_LOWER(__CCAST__)_get_type"))
+      register_derived_type(func(), module);
 
     // Add derived versions of interfaces, if the C type implements any interfaces:
 _IMPORT(SECTION_CC_IMPLEMENTS_INTERFACES)
@@ -287,7 +293,9 @@ GType __CPPNAME__::get_type(GTypeModule* module)
 
 GType __CPPNAME__::get_base_type()
 {
-  return _LOWER(__CCAST__)_get_type();
+  if (const auto func = (decltype(&_LOWER(__CCAST__)_get_type)) dlsym(RTLD_DEFAULT, "_LOWER(__CCAST__)_get_type"))
+    return func();
+  return GType();
 }
 
 _IMPORT(SECTION_CC)
