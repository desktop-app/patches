diff --git a/src/openglwidgets/qopenglwidget.cpp b/src/openglwidgets/qopenglwidget.cpp
index 4d8c181c22..18a20805ac 100644
--- a/src/openglwidgets/qopenglwidget.cpp
+++ b/src/openglwidgets/qopenglwidget.cpp
@@ -622,12 +622,13 @@ void QOpenGLWidgetPaintDevice::ensureActiveTarget()
     if (!wd->initialized)
         return;
 
-    if (QOpenGLContext::currentContext() != wd->context)
+    if (QOpenGLContext::currentContext() != wd->context) {
         d->w->makeCurrent();
-    else
+        if (!wd->initialized)
+            return; // Trying to fix a crash on context loss.
+    } else
         wd->fbos[wd->currentTargetBuffer]->bind();
 
-
     if (!wd->inPaintGL)
         QOpenGLContextPrivate::get(wd->context)->defaultFboRedirect = wd->fbos[wd->currentTargetBuffer]->handle();
 
@@ -720,7 +721,11 @@ void QOpenGLWidgetPrivate::recreateFbos()
 
     emit q->aboutToResize();
 
-    context->makeCurrent(surface);
+    if (!context->makeCurrent(surface)) {
+        // Trying to fix a crash on context loss.
+        reset();
+        return;
+    }
 
     destroyFbos();
 
@@ -802,6 +807,9 @@ void QOpenGLWidgetPrivate::beginCompose()
     if (flushPending) {
         flushPending = false;
         q->makeCurrent();
+        if (!initialized) {
+            return;
+        }
         static_cast<QOpenGLExtensions *>(context->functions())->flushShared();
     }
     hasBeenComposed = true;
@@ -857,6 +865,7 @@ void QOpenGLWidgetPrivate::initialize()
     }
     if (Q_UNLIKELY(!context->create())) {
         qWarning("QOpenGLWidget: Failed to create context");
+        reset();
         return;
     }
 
@@ -867,6 +876,7 @@ void QOpenGLWidgetPrivate::initialize()
 
     if (Q_UNLIKELY(!context->makeCurrent(surface))) {
         qWarning("QOpenGLWidget: Failed to make context current");
+        reset();
         return;
     }
 
@@ -907,6 +917,9 @@ void QOpenGLWidgetPrivate::resolveSamplesForBuffer(QOpenGLWidget::TargetBuffer t
     Q_Q(QOpenGLWidget);
     if (resolvedFbos[targetBuffer]) {
         q->makeCurrent(targetBuffer);
+        if (!initialized) {
+            return;
+        }
         QRect rect(QPoint(0, 0), fbos[targetBuffer]->size());
         QOpenGLFramebufferObject::blitFramebuffer(resolvedFbos[targetBuffer], rect, fbos[targetBuffer], rect);
         flushPending = true;
@@ -921,6 +934,8 @@ void QOpenGLWidgetPrivate::render()
         return;
 
     setCurrentTargetBuffer(QOpenGLWidget::LeftBuffer);
+    if (!initialized)
+        return; // Trying to fix a crash on context loss.
 
     QOpenGLContext *ctx = QOpenGLContext::currentContext();
     if (!ctx) {
@@ -1032,12 +1047,20 @@ QImage QOpenGLWidgetPrivate::grabFramebuffer(QOpenGLWidget::TargetBuffer targetB
     if (!fbos[targetBuffer]) // could be completely offscreen, without ever getting a resize event
         recreateFbos();
 
+    if (!fbos[targetBuffer])
+        return QImage(); // Trying to fix a crash on context loss.
+
     if (!inPaintGL)
         render();
 
     setCurrentTargetBuffer(targetBuffer);
+    if (!initialized)
+        return QImage(); // Trying to fix a crash on context loss.
+
     if (resolvedFbos[targetBuffer]) {
         resolveSamplesForBuffer(targetBuffer);
+        if (!initialized)
+            return QImage(); // Trying to fix a crash on context loss.
         resolvedFbos[targetBuffer]->bind();
     }
 
@@ -1272,7 +1295,12 @@ void QOpenGLWidget::makeCurrent()
     if (!d->initialized)
         return;
 
-    d->context->makeCurrent(d->surface);
+    if (!d->context->makeCurrent(d->surface)) {
+        // Trying to fix a crash on context loss.
+        // If makeCurrent() failed, that means we're not initialized any more.
+        d->initialized = false; // This prevents infinite recursion to makeCurrent().
+        d->reset();
+    }
 
     if (d->fbos[d->currentTargetBuffer]) // there may not be one if we are in reset()
         d->fbos[d->currentTargetBuffer]->bind();
@@ -1462,6 +1490,9 @@ void QOpenGLWidget::resizeEvent(QResizeEvent *e)
         return;
 
     d->recreateFbos();
+    if (!d->fbos[d->currentTargetBuffer])
+        return; // Trying to fix a crash on context loss.
+
     // Make sure our own context is current before invoking user overrides. If
     // the fbo was recreated then there's a chance something else is current now.
     makeCurrent();
