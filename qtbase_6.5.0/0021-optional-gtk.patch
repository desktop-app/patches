diff --git a/src/plugins/platformthemes/gtk3/CMakeLists.txt b/src/plugins/platformthemes/gtk3/CMakeLists.txt
index 89acc84f07..f34c027ba1 100644
--- a/src/plugins/platformthemes/gtk3/CMakeLists.txt
+++ b/src/plugins/platformthemes/gtk3/CMakeLists.txt
@@ -23,10 +23,15 @@ qt_internal_add_plugin(QGtk3ThemePlugin
         qgtk3interface.cpp qgtk3interface_p.h
         qgtk3storage.cpp qgtk3storage_p.h
         qgtk3json.cpp qgtk3json_p.h
+        qgtk3functions.h
     DEFINES
+        GLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_40
+        GLIB_VERSION_MAX_ALLOWED=GLIB_VERSION_2_40
         GDK_VERSION_MIN_REQUIRED=GDK_VERSION_3_6
+    SYSTEM_INCLUDE_DIRECTORIES
+        ${GTK3_INCLUDE_DIRS}
     LIBRARIES
-        PkgConfig::GTK3
+        ${CMAKE_DL_LIBS}
         Qt::Core
         Qt::CorePrivate
         Qt::Gui
@@ -34,6 +39,6 @@ qt_internal_add_plugin(QGtk3ThemePlugin
 )
 
 qt_internal_extend_target(QGtk3ThemePlugin CONDITION QT_FEATURE_xlib
-    LIBRARIES
-        X11::X11
+    SYSTEM_INCLUDE_DIRECTORIES
+        ${X11_INCLUDE_DIRS}
 )
diff --git a/src/plugins/platformthemes/gtk3/main.cpp b/src/plugins/platformthemes/gtk3/main.cpp
index 569c2d8744..fa01e10ab8 100644
--- a/src/plugins/platformthemes/gtk3/main.cpp
+++ b/src/plugins/platformthemes/gtk3/main.cpp
@@ -4,8 +4,214 @@
 #include <qpa/qplatformthemeplugin.h>
 #include "qgtk3theme.h"
 
+#undef signals
+#include "qgtk3functions.h"
+
+#include <dlfcn.h>
+#include <memory>
+#include <iostream>
+
+#define LOAD_SYMBOL(handle, func) LoadSymbol(handle, #func, func, true)
+#define LOAD_SYMBOL_OPT(handle, func) LoadSymbol(handle, #func, func, false)
+
 QT_BEGIN_NAMESPACE
 
+namespace {
+
+struct HandleDeleter {
+    void operator()(void *handle) {
+        dlclose(handle);
+    }
+};
+
+using Handle = std::unique_ptr<void, HandleDeleter>;
+
+bool LoadLibrary(Handle &handle, const char *name) {
+    handle = Handle(dlopen(name, RTLD_LAZY | RTLD_NODELETE));
+    if (handle)
+        return true;
+    std::cerr << dlerror() << std::endl;
+    return false;
+}
+
+template <typename Function>
+inline bool LoadSymbol(const Handle &handle, const char *name, Function &func, bool log) {
+    func = handle
+        ? reinterpret_cast<Function>(dlsym(handle.get(), name))
+        : nullptr;
+    if (const auto error = dlerror(); error && log)
+        std::cerr << error << std::endl;
+    return (func != nullptr);
+}
+
+bool ResolveGtk() {
+    static const auto loaded = [&] {
+        auto lib = Handle();
+        if (!LoadLibrary(lib, "libgtk-3.so.0"))
+            return false;
+        LOAD_SYMBOL_OPT(lib, gdk_wayland_window_get_type);
+        LOAD_SYMBOL_OPT(lib, gdk_wayland_window_set_transient_for_exported);
+        LOAD_SYMBOL_OPT(lib, gdk_x11_display_get_xdisplay);
+        LOAD_SYMBOL_OPT(lib, gdk_x11_window_get_type);
+        LOAD_SYMBOL_OPT(lib, gdk_x11_window_get_xid);
+        return LOAD_SYMBOL(lib, g_file_info_get_icon)
+            && LOAD_SYMBOL(lib, g_file_new_for_path)
+            && LOAD_SYMBOL(lib, g_file_query_info)
+            && LOAD_SYMBOL(lib, g_free)
+            && LOAD_SYMBOL(lib, g_log_default_handler)
+            && LOAD_SYMBOL(lib, g_log_set_handler)
+            && LOAD_SYMBOL(lib, g_slist_free)
+            && LOAD_SYMBOL(lib, g_strcmp0)
+            && LOAD_SYMBOL(lib, g_object_class_find_property)
+            && LOAD_SYMBOL(lib, g_object_get)
+            && LOAD_SYMBOL(lib, g_object_set)
+            && LOAD_SYMBOL(lib, g_object_unref)
+            && LOAD_SYMBOL(lib, g_signal_connect_data)
+            && LOAD_SYMBOL(lib, g_type_check_instance_cast)
+            && LOAD_SYMBOL(lib, g_type_check_instance_is_a)
+            && LOAD_SYMBOL(lib, g_type_ensure)
+            && LOAD_SYMBOL(lib, gdk_pixbuf_get_bits_per_sample)
+            && LOAD_SYMBOL(lib, gdk_pixbuf_get_height)
+            && LOAD_SYMBOL(lib, gdk_pixbuf_get_n_channels)
+            && LOAD_SYMBOL(lib, gdk_pixbuf_get_pixels)
+            && LOAD_SYMBOL(lib, gdk_pixbuf_get_rowstride)
+            && LOAD_SYMBOL(lib, gdk_pixbuf_get_width)
+            && LOAD_SYMBOL(lib, gdk_pixbuf_new_from_file_at_size)
+            && LOAD_SYMBOL(lib, gdk_set_allowed_backends)
+            && LOAD_SYMBOL(lib, gdk_window_focus)
+            && LOAD_SYMBOL(lib, gdk_window_get_display)
+            && LOAD_SYMBOL(lib, gdk_window_set_modal_hint)
+            && LOAD_SYMBOL(lib, gtk_accel_label_get_type)
+            && LOAD_SYMBOL(lib, gtk_accel_label_set_accel)
+            && LOAD_SYMBOL(lib, gtk_bin_get_child)
+            && LOAD_SYMBOL(lib, gtk_bin_get_type)
+            && LOAD_SYMBOL(lib, gtk_button_box_new)
+            && LOAD_SYMBOL(lib, gtk_button_get_type)
+            && LOAD_SYMBOL(lib, gtk_button_new)
+            && LOAD_SYMBOL(lib, gtk_button_set_label)
+            && LOAD_SYMBOL(lib, gtk_check_button_new)
+            && LOAD_SYMBOL(lib, gtk_check_menu_item_get_active)
+            && LOAD_SYMBOL(lib, gtk_check_menu_item_get_type)
+            && LOAD_SYMBOL(lib, gtk_check_menu_item_new)
+            && LOAD_SYMBOL(lib, gtk_check_menu_item_set_active)
+            && LOAD_SYMBOL(lib, gtk_check_version)
+            && LOAD_SYMBOL(lib, gtk_clipboard_get)
+            && LOAD_SYMBOL(lib, gtk_clipboard_store)
+            && LOAD_SYMBOL(lib, gtk_color_chooser_dialog_new)
+            && LOAD_SYMBOL(lib, gtk_color_chooser_get_rgba)
+            && LOAD_SYMBOL(lib, gtk_color_chooser_get_type)
+            && LOAD_SYMBOL(lib, gtk_color_chooser_set_rgba)
+            && LOAD_SYMBOL(lib, gtk_color_chooser_set_use_alpha)
+            && LOAD_SYMBOL(lib, gtk_combo_box_new)
+            && LOAD_SYMBOL(lib, gtk_combo_box_text_new)
+            && LOAD_SYMBOL(lib, gtk_container_get_type)
+            && LOAD_SYMBOL(lib, gtk_container_remove)
+            && LOAD_SYMBOL(lib, gtk_dialog_add_button)
+            && LOAD_SYMBOL(lib, gtk_dialog_get_type)
+            && LOAD_SYMBOL(lib, gtk_dialog_get_widget_for_response)
+            && LOAD_SYMBOL(lib, gtk_dialog_run)
+            && LOAD_SYMBOL(lib, gtk_entry_new)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_add_filter)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_dialog_new)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_get_current_folder)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_get_filename)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_get_filenames)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_get_filter)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_get_preview_filename)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_get_type)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_remove_filter)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_select_filename)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_action)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_create_folders)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_current_folder)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_current_name)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_do_overwrite_confirmation)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_filter)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_local_only)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_preview_widget)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_preview_widget_active)
+            && LOAD_SYMBOL(lib, gtk_file_chooser_set_select_multiple)
+            && LOAD_SYMBOL(lib, gtk_file_filter_add_pattern)
+            && LOAD_SYMBOL(lib, gtk_file_filter_new)
+            && LOAD_SYMBOL(lib, gtk_file_filter_set_name)
+            && LOAD_SYMBOL(lib, gtk_fixed_new)
+            && LOAD_SYMBOL(lib, gtk_font_chooser_dialog_new)
+            && LOAD_SYMBOL(lib, gtk_font_chooser_get_font)
+            && LOAD_SYMBOL(lib, gtk_font_chooser_get_type)
+            && LOAD_SYMBOL(lib, gtk_font_chooser_set_font)
+            && LOAD_SYMBOL(lib, gtk_frame_new)
+            && LOAD_SYMBOL(lib, gtk_get_current_event_time)
+            && LOAD_SYMBOL(lib, gtk_icon_factory_lookup_default)
+            && LOAD_SYMBOL(lib, gtk_icon_info_load_icon)
+            && LOAD_SYMBOL(lib, gtk_icon_set_render_icon_pixbuf)
+            && LOAD_SYMBOL(lib, gtk_icon_theme_get_default)
+            && LOAD_SYMBOL(lib, gtk_icon_theme_lookup_by_gicon)
+            && LOAD_SYMBOL(lib, gtk_image_get_type)
+            && LOAD_SYMBOL(lib, gtk_image_new)
+            && LOAD_SYMBOL(lib, gtk_image_set_from_pixbuf)
+            && LOAD_SYMBOL(lib, gtk_init)
+            && LOAD_SYMBOL(lib, gtk_menu_bar_new)
+            && LOAD_SYMBOL(lib, gtk_menu_get_type)
+            && LOAD_SYMBOL(lib, gtk_menu_item_get_type)
+            && LOAD_SYMBOL(lib, gtk_menu_item_new)
+            && LOAD_SYMBOL(lib, gtk_menu_item_set_label)
+            && LOAD_SYMBOL(lib, gtk_menu_item_set_submenu)
+            && LOAD_SYMBOL(lib, gtk_menu_item_set_use_underline)
+            && LOAD_SYMBOL(lib, gtk_menu_new)
+            && LOAD_SYMBOL(lib, gtk_menu_popdown)
+            && LOAD_SYMBOL(lib, gtk_menu_popup)
+            && LOAD_SYMBOL(lib, gtk_menu_shell_get_type)
+            && LOAD_SYMBOL(lib, gtk_menu_shell_insert)
+            && LOAD_SYMBOL(lib, gtk_menu_shell_select_item)
+            && LOAD_SYMBOL(lib, gtk_notebook_new)
+            && LOAD_SYMBOL(lib, gtk_offscreen_window_new)
+            && LOAD_SYMBOL(lib, gtk_progress_bar_new)
+            && LOAD_SYMBOL(lib, gtk_radio_button_new)
+            && LOAD_SYMBOL(lib, gtk_separator_menu_item_new)
+            && LOAD_SYMBOL(lib, gtk_settings_get_default)
+            && LOAD_SYMBOL(lib, gtk_statusbar_new)
+            && LOAD_SYMBOL(lib, gtk_style_context_get_background_color)
+            && LOAD_SYMBOL(lib, gtk_style_context_get_border_color)
+            && LOAD_SYMBOL(lib, gtk_style_context_get_color)
+            && LOAD_SYMBOL(lib, gtk_style_context_get_font)
+            && LOAD_SYMBOL(lib, gtk_style_context_lookup_color)
+            && LOAD_SYMBOL(lib, gtk_toolbar_new)
+            && LOAD_SYMBOL(lib, gtk_tree_view_new)
+            && LOAD_SYMBOL(lib, gtk_widget_destroy)
+            && LOAD_SYMBOL(lib, gtk_widget_get_scale_factor)
+            && LOAD_SYMBOL(lib, gtk_widget_get_style_context)
+            && LOAD_SYMBOL(lib, gtk_widget_get_type)
+            && LOAD_SYMBOL(lib, gtk_widget_get_window)
+            && LOAD_SYMBOL(lib, gtk_widget_hide)
+            && LOAD_SYMBOL(lib, gtk_widget_hide_on_delete)
+            && LOAD_SYMBOL(lib, gtk_widget_realize)
+            && LOAD_SYMBOL(lib, gtk_widget_set_sensitive)
+            && LOAD_SYMBOL(lib, gtk_widget_set_visible)
+            && LOAD_SYMBOL(lib, gtk_widget_show)
+            && LOAD_SYMBOL(lib, gtk_window_get_type)
+            && LOAD_SYMBOL(lib, gtk_window_new)
+            && LOAD_SYMBOL(lib, gtk_window_set_title)
+            && LOAD_SYMBOL(lib, gtk_window_set_transient_for)
+            && LOAD_SYMBOL(lib, pango_font_description_free)
+            && LOAD_SYMBOL(lib, pango_font_description_from_string)
+            && LOAD_SYMBOL(lib, pango_font_description_get_family)
+            && LOAD_SYMBOL(lib, pango_font_description_get_size)
+            && LOAD_SYMBOL(lib, pango_font_description_get_style)
+            && LOAD_SYMBOL(lib, pango_font_description_get_weight)
+            && LOAD_SYMBOL(lib, pango_font_description_new)
+            && LOAD_SYMBOL(lib, pango_font_description_set_family)
+            && LOAD_SYMBOL(lib, pango_font_description_set_size)
+            && LOAD_SYMBOL(lib, pango_font_description_set_style)
+            && LOAD_SYMBOL(lib, pango_font_description_set_weight)
+            && LOAD_SYMBOL(lib, pango_font_description_to_string)
+            && LOAD_SYMBOL(lib, pango_font_face_get_type)
+            && LOAD_SYMBOL(lib, pango_font_family_get_type);
+    }();
+    return loaded;
+}
+
+} // namespace
+
 class QGtk3ThemePlugin : public QPlatformThemePlugin
 {
    Q_OBJECT
@@ -18,7 +224,7 @@ public:
 QPlatformTheme *QGtk3ThemePlugin::create(const QString &key, const QStringList &params)
 {
     Q_UNUSED(params);
-    if (!key.compare(QLatin1StringView(QGtk3Theme::name), Qt::CaseInsensitive))
+    if (!key.compare(QLatin1StringView(QGtk3Theme::name), Qt::CaseInsensitive) && ResolveGtk())
         return new QGtk3Theme;
 
     return nullptr;
diff --git a/src/plugins/platformthemes/gtk3/qgtk3dialoghelpers.cpp b/src/plugins/platformthemes/gtk3/qgtk3dialoghelpers.cpp
index b8ba58d30e..4461fc8a97 100644
--- a/src/plugins/platformthemes/gtk3/qgtk3dialoghelpers.cpp
+++ b/src/plugins/platformthemes/gtk3/qgtk3dialoghelpers.cpp
@@ -29,6 +29,10 @@
 #include <gdk/gdkwayland.h>
 #endif
 
+#include <dlfcn.h>
+
+#include "qgtk3functions.h"
+
 // The size of the preview we display for selected image files. We set height
 // larger than width because generally there is more free space vertically
 // than horizontally (setting the preview image will always expand the width of
@@ -106,7 +110,7 @@ bool QGtk3Dialog::show(Qt::WindowFlags flags, Qt::WindowModality modality, QWind
     if (parent) {
         if (false) {
 #if defined(GDK_WINDOWING_WAYLAND) && GTK_CHECK_VERSION(3, 22, 0)
-        } else if (GDK_IS_WAYLAND_WINDOW(gdkWindow)) {
+        } else if (gdk_wayland_window_get_type && gdk_wayland_window_set_transient_for_exported && GDK_IS_WAYLAND_WINDOW(gdkWindow)) {
             const auto unixServices = dynamic_cast<QGenericUnixServices *>(
                     QGuiApplicationPrivate::platformIntegration()->services());
             if (unixServices) {
@@ -118,11 +122,20 @@ bool QGtk3Dialog::show(Qt::WindowFlags flags, Qt::WindowModality modality, QWind
             }
 #endif
 #if QT_CONFIG(xlib) && defined(GDK_WINDOWING_X11)
-        } else if (GDK_IS_X11_WINDOW(gdkWindow)) {
-            GdkDisplay *gdkDisplay = gdk_window_get_display(gdkWindow);
-            XSetTransientForHint(gdk_x11_display_get_xdisplay(gdkDisplay),
-                                 gdk_x11_window_get_xid(gdkWindow),
-                                 parent->winId());
+        } else if (gdk_x11_window_get_type && gdk_x11_display_get_xdisplay && gdk_x11_window_get_xid && GDK_IS_X11_WINDOW(gdkWindow)) {
+            const auto xlib = dlopen("libX11.so.6", RTLD_LAZY);
+            (void) dlerror(); // Reset errors if any
+            if (xlib) {
+                const auto XSetTransientForHint = reinterpret_cast<decltype(&::XSetTransientForHint)>(dlsym(xlib, "XSetTransientForHint"));
+                (void) dlerror(); // Reset errors if any
+                if (XSetTransientForHint) {
+                    GdkDisplay *gdkDisplay = gdk_window_get_display(gdkWindow);
+                    XSetTransientForHint(gdk_x11_display_get_xdisplay(gdkDisplay),
+                                        gdk_x11_window_get_xid(gdkWindow),
+                                        parent->winId());
+                }
+                dlclose(xlib);
+            }
 #endif
         }
     }
diff --git a/src/plugins/platformthemes/gtk3/qgtk3functions.h b/src/plugins/platformthemes/gtk3/qgtk3functions.h
new file mode 100644
index 0000000000..02431bcef3
--- /dev/null
+++ b/src/plugins/platformthemes/gtk3/qgtk3functions.h
@@ -0,0 +1,468 @@
+#pragma once
+
+#include <gtk/gtk.h>
+#include <gdk/gdk.h>
+#include <gdk/gdkx.h>
+#include <pango/pango.h>
+
+#define g_file_info_get_icon ptr_g_file_info_get_icon
+#define g_file_new_for_path ptr_g_file_new_for_path
+#define g_file_query_info ptr_g_file_query_info
+#define g_free ptr_g_free
+#define g_log_default_handler ptr_g_log_default_handler
+#define g_log_set_handler ptr_g_log_set_handler
+#define g_slist_free ptr_g_slist_free
+#define g_strcmp0 ptr_g_strcmp0
+#define g_object_class_find_property ptr_g_object_class_find_property
+#define g_object_get ptr_g_object_get
+#define g_object_set ptr_g_object_set
+#define g_object_unref ptr_g_object_unref
+#define g_signal_connect_data ptr_g_signal_connect_data
+#define g_type_check_instance_cast ptr_g_type_check_instance_cast
+#define g_type_check_instance_is_a ptr_g_type_check_instance_is_a
+#define g_type_check_instance_is_fundamentally_a ptr_g_type_check_instance_is_fundamentally_a
+#define g_type_ensure ptr_g_type_ensure
+#define gdk_pixbuf_get_bits_per_sample ptr_gdk_pixbuf_get_bits_per_sample
+#define gdk_pixbuf_get_height ptr_gdk_pixbuf_get_height
+#define gdk_pixbuf_get_n_channels ptr_gdk_pixbuf_get_n_channels
+#define gdk_pixbuf_get_pixels ptr_gdk_pixbuf_get_pixels
+#define gdk_pixbuf_get_rowstride ptr_gdk_pixbuf_get_rowstride
+#define gdk_pixbuf_get_width ptr_gdk_pixbuf_get_width
+#define gdk_pixbuf_new_from_file_at_size ptr_gdk_pixbuf_new_from_file_at_size
+#define gdk_set_allowed_backends ptr_gdk_set_allowed_backends
+#define gdk_wayland_window_get_type ptr_gdk_wayland_window_get_type
+#define gdk_wayland_window_set_transient_for_exported ptr_gdk_wayland_window_set_transient_for_exported
+#define gdk_window_focus ptr_gdk_window_focus
+#define gdk_window_get_display ptr_gdk_window_get_display
+#define gdk_window_set_modal_hint ptr_gdk_window_set_modal_hint
+#define gdk_x11_display_get_xdisplay ptr_gdk_x11_display_get_xdisplay
+#define gdk_x11_window_get_type ptr_gdk_x11_window_get_type
+#define gdk_x11_window_get_xid ptr_gdk_x11_window_get_xid
+#define gtk_accel_label_get_type ptr_gtk_accel_label_get_type
+#define gtk_accel_label_set_accel ptr_gtk_accel_label_set_accel
+#define gtk_bin_get_child ptr_gtk_bin_get_child
+#define gtk_bin_get_type ptr_gtk_bin_get_type
+#define gtk_button_box_new ptr_gtk_button_box_new
+#define gtk_button_get_type ptr_gtk_button_get_type
+#define gtk_button_new ptr_gtk_button_new
+#define gtk_button_set_label ptr_gtk_button_set_label
+#define gtk_check_button_new ptr_gtk_check_button_new
+#define gtk_check_menu_item_get_active ptr_gtk_check_menu_item_get_active
+#define gtk_check_menu_item_get_type ptr_gtk_check_menu_item_get_type
+#define gtk_check_menu_item_new ptr_gtk_check_menu_item_new
+#define gtk_check_menu_item_set_active ptr_gtk_check_menu_item_set_active
+#define gtk_check_version ptr_gtk_check_version
+#define gtk_clipboard_get ptr_gtk_clipboard_get
+#define gtk_clipboard_store ptr_gtk_clipboard_store
+#define gtk_color_chooser_dialog_new ptr_gtk_color_chooser_dialog_new
+#define gtk_color_chooser_get_type ptr_gtk_color_chooser_get_type
+#define gtk_color_chooser_get_rgba ptr_gtk_color_chooser_get_rgba
+#define gtk_color_chooser_set_rgba ptr_gtk_color_chooser_set_rgba
+#define gtk_color_chooser_set_use_alpha ptr_gtk_color_chooser_set_use_alpha
+#define gtk_combo_box_new ptr_gtk_combo_box_new
+#define gtk_combo_box_text_new ptr_gtk_combo_box_text_new
+#define gtk_container_get_type ptr_gtk_container_get_type
+#define gtk_container_remove ptr_gtk_container_remove
+#define gtk_dialog_add_button ptr_gtk_dialog_add_button
+#define gtk_dialog_get_type ptr_gtk_dialog_get_type
+#define gtk_dialog_get_widget_for_response ptr_gtk_dialog_get_widget_for_response
+#define gtk_dialog_run ptr_gtk_dialog_run
+#define gtk_entry_new ptr_gtk_entry_new
+#define gtk_file_chooser_add_filter ptr_gtk_file_chooser_add_filter
+#define gtk_file_chooser_dialog_new ptr_gtk_file_chooser_dialog_new
+#define gtk_file_chooser_get_current_folder ptr_gtk_file_chooser_get_current_folder
+#define gtk_file_chooser_get_filename ptr_gtk_file_chooser_get_filename
+#define gtk_file_chooser_get_filenames ptr_gtk_file_chooser_get_filenames
+#define gtk_file_chooser_get_filter ptr_gtk_file_chooser_get_filter
+#define gtk_file_chooser_get_preview_filename ptr_gtk_file_chooser_get_preview_filename
+#define gtk_file_chooser_get_type ptr_gtk_file_chooser_get_type
+#define gtk_file_chooser_remove_filter ptr_gtk_file_chooser_remove_filter
+#define gtk_file_chooser_select_filename ptr_gtk_file_chooser_select_filename
+#define gtk_file_chooser_set_action ptr_gtk_file_chooser_set_action
+#define gtk_file_chooser_set_create_folders ptr_gtk_file_chooser_set_create_folders
+#define gtk_file_chooser_set_current_folder ptr_gtk_file_chooser_set_current_folder
+#define gtk_file_chooser_set_current_name ptr_gtk_file_chooser_set_current_name
+#define gtk_file_chooser_set_do_overwrite_confirmation ptr_gtk_file_chooser_set_do_overwrite_confirmation
+#define gtk_file_chooser_set_filter ptr_gtk_file_chooser_set_filter
+#define gtk_file_chooser_set_local_only ptr_gtk_file_chooser_set_local_only
+#define gtk_file_chooser_set_preview_widget ptr_gtk_file_chooser_set_preview_widget
+#define gtk_file_chooser_set_preview_widget_active ptr_gtk_file_chooser_set_preview_widget_active
+#define gtk_file_chooser_set_select_multiple ptr_gtk_file_chooser_set_select_multiple
+#define gtk_file_filter_add_pattern ptr_gtk_file_filter_add_pattern
+#define gtk_file_filter_new ptr_gtk_file_filter_new
+#define gtk_file_filter_set_name ptr_gtk_file_filter_set_name
+#define gtk_fixed_new ptr_gtk_fixed_new
+#define gtk_font_chooser_dialog_new ptr_gtk_font_chooser_dialog_new
+#define gtk_font_chooser_get_font ptr_gtk_font_chooser_get_font
+#define gtk_font_chooser_get_type ptr_gtk_font_chooser_get_type
+#define gtk_font_chooser_set_font ptr_gtk_font_chooser_set_font
+#define gtk_frame_new ptr_gtk_frame_new
+#define gtk_get_current_event_time ptr_gtk_get_current_event_time
+#define gtk_icon_factory_lookup_default ptr_gtk_icon_factory_lookup_default
+#define gtk_icon_info_load_icon ptr_gtk_icon_info_load_icon
+#define gtk_icon_set_render_icon_pixbuf ptr_gtk_icon_set_render_icon_pixbuf
+#define gtk_icon_theme_get_default ptr_gtk_icon_theme_get_default
+#define gtk_icon_theme_lookup_by_gicon ptr_gtk_icon_theme_lookup_by_gicon
+#define gtk_image_get_type ptr_gtk_image_get_type
+#define gtk_image_new ptr_gtk_image_new
+#define gtk_image_set_from_pixbuf ptr_gtk_image_set_from_pixbuf
+#define gtk_init ptr_gtk_init
+#define gtk_menu_bar_new ptr_gtk_menu_bar_new
+#define gtk_menu_get_type ptr_gtk_menu_get_type
+#define gtk_menu_item_get_type ptr_gtk_menu_item_get_type
+#define gtk_menu_item_new ptr_gtk_menu_item_new
+#define gtk_menu_item_set_label ptr_gtk_menu_item_set_label
+#define gtk_menu_item_set_submenu ptr_gtk_menu_item_set_submenu
+#define gtk_menu_item_set_use_underline ptr_gtk_menu_item_set_use_underline
+#define gtk_menu_new ptr_gtk_menu_new
+#define gtk_menu_popdown ptr_gtk_menu_popdown
+#define gtk_menu_popup ptr_gtk_menu_popup
+#define gtk_menu_shell_get_type ptr_gtk_menu_shell_get_type
+#define gtk_menu_shell_insert ptr_gtk_menu_shell_insert
+#define gtk_menu_shell_select_item ptr_gtk_menu_shell_select_item
+#define gtk_notebook_new ptr_gtk_notebook_new
+#define gtk_offscreen_window_new ptr_gtk_offscreen_window_new
+#define gtk_progress_bar_new ptr_gtk_progress_bar_new
+#define gtk_radio_button_new ptr_gtk_radio_button_new
+#define gtk_separator_menu_item_new ptr_gtk_separator_menu_item_new
+#define gtk_settings_get_default ptr_gtk_settings_get_default
+#define gtk_statusbar_new ptr_gtk_statusbar_new
+#define gtk_style_context_get_background_color ptr_gtk_style_context_get_background_color
+#define gtk_style_context_get_border_color ptr_gtk_style_context_get_border_color
+#define gtk_style_context_get_color ptr_gtk_style_context_get_color
+#define gtk_style_context_get_font ptr_gtk_style_context_get_font
+#define gtk_style_context_lookup_color ptr_gtk_style_context_lookup_color
+#define gtk_toolbar_new ptr_gtk_toolbar_new
+#define gtk_tree_view_new ptr_gtk_tree_view_new
+#define gtk_widget_destroy ptr_gtk_widget_destroy
+#define gtk_widget_get_scale_factor ptr_gtk_widget_get_scale_factor
+#define gtk_widget_get_style_context ptr_gtk_widget_get_style_context
+#define gtk_widget_get_type ptr_gtk_widget_get_type
+#define gtk_window_new ptr_gtk_window_new
+#define gtk_widget_get_window ptr_gtk_widget_get_window
+#define gtk_widget_hide ptr_gtk_widget_hide
+#define gtk_widget_hide_on_delete ptr_gtk_widget_hide_on_delete
+#define gtk_widget_realize ptr_gtk_widget_realize
+#define gtk_widget_set_sensitive ptr_gtk_widget_set_sensitive
+#define gtk_widget_set_visible ptr_gtk_widget_set_visible
+#define gtk_widget_show ptr_gtk_widget_show
+#define gtk_window_get_type ptr_gtk_window_get_type
+#define gtk_window_set_title ptr_gtk_window_set_title
+#define gtk_window_set_transient_for ptr_gtk_window_set_transient_for
+#define pango_font_description_free ptr_pango_font_description_free
+#define pango_font_description_from_string ptr_pango_font_description_from_string
+#define pango_font_description_get_family ptr_pango_font_description_get_family
+#define pango_font_description_get_size ptr_pango_font_description_get_size
+#define pango_font_description_get_style ptr_pango_font_description_get_style
+#define pango_font_description_get_weight ptr_pango_font_description_get_weight
+#define pango_font_description_new ptr_pango_font_description_new
+#define pango_font_description_set_family ptr_pango_font_description_set_family
+#define pango_font_description_set_size ptr_pango_font_description_set_size
+#define pango_font_description_set_style ptr_pango_font_description_set_style
+#define pango_font_description_set_weight ptr_pango_font_description_set_weight
+#define pango_font_description_to_string ptr_pango_font_description_to_string
+#define pango_font_face_get_type ptr_pango_font_face_get_type
+#define pango_font_family_get_type ptr_pango_font_family_get_type
+
+inline GIcon *(*g_file_info_get_icon)(GFileInfo *info);
+inline GFile *(*g_file_new_for_path)(const char *path);
+inline GFileInfo *(*g_file_query_info)(
+	GFile *file,
+	const char *attributes,
+	GFileQueryInfoFlags flags,
+	GCancellable *cancellable,
+	GError **error);
+inline void (*g_free)(gpointer mem);
+inline void (*g_log_default_handler)(
+	const gchar *log_domain,
+	GLogLevelFlags log_level,
+	const gchar *message,
+	gpointer unused_data);
+inline guint (*g_log_set_handler)(
+	const gchar *log_domain,
+	GLogLevelFlags log_levels,
+	GLogFunc log_func,
+	gpointer user_data);
+inline void (*g_slist_free)(GSList *list);
+inline int (*g_strcmp0)(const char *str1, const char *str2);
+inline GParamSpec *(*g_object_class_find_property)(
+	GObjectClass *oclass,
+	const gchar *property_name);
+inline void (*g_object_get)(
+	gpointer object,
+	const gchar *first_property_name,
+	...);
+inline void (*g_object_set)(
+	gpointer object,
+	const gchar *first_property_name,
+	...);
+inline void (*g_object_unref)(gpointer object);
+inline gulong (*g_signal_connect_data)(
+	gpointer instance,
+	const gchar *detailed_signal,
+	GCallback c_handler,
+	gpointer data,
+	GClosureNotify destroy_data,
+	GConnectFlags connect_flags);
+inline GTypeInstance *(*g_type_check_instance_cast)(
+	GTypeInstance *instance,
+	GType iface_type);
+inline gboolean (*g_type_check_instance_is_a)(
+	GTypeInstance *instance,
+	GType iface_type);
+inline void (*g_type_ensure)(GType type);
+inline int (*gdk_pixbuf_get_bits_per_sample)(const GdkPixbuf *pixbuf);
+inline int (*gdk_pixbuf_get_height)(const GdkPixbuf *pixbuf);
+inline int (*gdk_pixbuf_get_n_channels)(const GdkPixbuf *pixbuf);
+inline guchar *(*gdk_pixbuf_get_pixels)(const GdkPixbuf *pixbuf);
+inline int (*gdk_pixbuf_get_rowstride)(const GdkPixbuf *pixbuf);
+inline int (*gdk_pixbuf_get_width)(const GdkPixbuf *pixbuf);
+inline GdkPixbuf *(*gdk_pixbuf_new_from_file_at_size)(
+	const char *filename,
+	int width,
+	int height,
+	GError **error);
+inline void (*gdk_set_allowed_backends)(const gchar *backends);
+inline GType (*gdk_wayland_window_get_type)(void);
+inline gboolean (*gdk_wayland_window_set_transient_for_exported)(
+	GdkWindow *window,
+	char *parent_handle_str);
+inline void (*gdk_window_focus)(GdkWindow *window, guint32 timestamp);
+inline GdkDisplay *(*gdk_window_get_display)(GdkWindow *window);
+inline void (*gdk_window_set_modal_hint)(GdkWindow *window, gboolean modal);
+inline Display *(*gdk_x11_display_get_xdisplay)(GdkDisplay *display);
+inline GType (*gdk_x11_window_get_type)(void);
+inline Window (*gdk_x11_window_get_xid)(GdkWindow *window);
+inline GType (*gtk_accel_label_get_type)(void);
+inline void (*gtk_accel_label_set_accel)(
+	GtkAccelLabel *accel_label,
+	guint accelerator_key,
+	GdkModifierType accelerator_mods);
+inline GtkWidget *(*gtk_bin_get_child)(GtkBin *bin);
+inline GType (*gtk_bin_get_type)(void);
+inline GtkWidget *(*gtk_button_box_new)(GtkOrientation orientation);
+inline GType (*gtk_button_get_type)(void);
+inline GtkWidget *(*gtk_button_new)(void);
+inline void (*gtk_button_set_label)(GtkButton *button, const gchar *label);
+inline GtkWidget *(*gtk_check_button_new)(void);
+inline gboolean (*gtk_check_menu_item_get_active)(GtkCheckMenuItem *check_menu_item);
+inline GType (*gtk_check_menu_item_get_type)(void);
+inline GtkWidget *(*gtk_check_menu_item_new)(void);
+inline void (*gtk_check_menu_item_set_active)(
+	GtkCheckMenuItem *check_menu_item,
+	gboolean is_active);
+inline const gchar *(*gtk_check_version)(
+	guint required_major,
+	guint required_minor,
+	guint required_micro);
+inline GtkClipboard *(*gtk_clipboard_get)(GdkAtom selection);
+inline void (*gtk_clipboard_store)(GtkClipboard *clipboard);
+inline GtkWidget *(*gtk_color_chooser_dialog_new)(
+	const gchar *title,
+	GtkWindow *parent);
+inline GType (*gtk_color_chooser_get_type)(void);
+inline void (*gtk_color_chooser_get_rgba)(
+	GtkColorChooser *chooser,
+	GdkRGBA *color);
+inline void (*gtk_color_chooser_set_rgba)(
+	GtkColorChooser *chooser,
+	const GdkRGBA *color);
+inline void (*gtk_color_chooser_set_use_alpha)(
+	GtkColorChooser *chooser,
+	gboolean use_alpha);
+inline GtkWidget *(*gtk_combo_box_new)(void);
+inline GtkWidget *(*gtk_combo_box_text_new)(void);
+inline GType (*gtk_container_get_type)(void);
+inline void (*gtk_container_remove)(GtkContainer *container, GtkWidget *widget);
+inline GtkWidget *(*gtk_dialog_add_button)(
+	GtkDialog *dialog,
+	const gchar *button_text,
+	gint response_id);
+inline GType (*gtk_dialog_get_type)(void);
+inline GtkWidget *(*gtk_dialog_get_widget_for_response)(
+	GtkDialog *dialog,
+	gint response_id);
+inline gint (*gtk_dialog_run)(GtkDialog *dialog);
+inline GtkWidget *(*gtk_entry_new)(void);
+inline void (*gtk_file_chooser_add_filter)(
+	GtkFileChooser *chooser,
+	GtkFileFilter *filter);
+inline GtkWidget *(*gtk_file_chooser_dialog_new)(
+	const gchar *title,
+	GtkWindow *parent,
+	GtkFileChooserAction action,
+	const gchar *first_button_text,
+	...);
+inline gchar *(*gtk_file_chooser_get_current_folder)(GtkFileChooser *chooser);
+inline gchar *(*gtk_file_chooser_get_filename)(GtkFileChooser *chooser);
+inline GSList *(*gtk_file_chooser_get_filenames)(GtkFileChooser *chooser);
+inline GtkFileFilter *(*gtk_file_chooser_get_filter)(GtkFileChooser *chooser);
+inline char *(*gtk_file_chooser_get_preview_filename)(GtkFileChooser *chooser);
+inline GType (*gtk_file_chooser_get_type)(void);
+inline void (*gtk_file_chooser_remove_filter)(
+	GtkFileChooser *chooser,
+	GtkFileFilter *filter);
+inline gboolean (*gtk_file_chooser_select_filename)(
+	GtkFileChooser *chooser,
+	const char *filename);
+inline void (*gtk_file_chooser_set_action)(
+	GtkFileChooser *chooser,
+	GtkFileChooserAction action);
+inline void (*gtk_file_chooser_set_create_folders)(
+	GtkFileChooser *chooser,
+	gboolean create_folders);
+inline gboolean (*gtk_file_chooser_set_current_folder)(
+	GtkFileChooser *chooser,
+	const gchar *filename);
+inline void (*gtk_file_chooser_set_current_name)(
+	GtkFileChooser *chooser,
+	const gchar *name);
+inline void (*gtk_file_chooser_set_do_overwrite_confirmation)(
+	GtkFileChooser *chooser,
+	gboolean do_overwrite_confirmation);
+inline void (*gtk_file_chooser_set_filter)(
+	GtkFileChooser *chooser,
+	GtkFileFilter *filter);
+inline void (*gtk_file_chooser_set_local_only)(
+	GtkFileChooser *chooser,
+	gboolean local_only);
+inline void (*gtk_file_chooser_set_preview_widget)(
+	GtkFileChooser *chooser,
+	GtkWidget *preview_widget);
+inline void (*gtk_file_chooser_set_preview_widget_active)(
+	GtkFileChooser *chooser,
+	gboolean active);
+inline void (*gtk_file_chooser_set_select_multiple)(
+	GtkFileChooser *chooser,
+	gboolean select_multiple);
+inline void (*gtk_file_filter_add_pattern)(
+	GtkFileFilter *filter,
+	const gchar *pattern);
+inline GtkFileFilter *(*gtk_file_filter_new)(void);
+inline void (*gtk_file_filter_set_name)(
+	GtkFileFilter *filter,
+	const gchar *name);
+inline GtkWidget *(*gtk_fixed_new)(void);
+inline GtkWidget *(*gtk_font_chooser_dialog_new)(
+	const gchar *title,
+	GtkWindow *parent);
+inline gchar *(*gtk_font_chooser_get_font)(GtkFontChooser *fontchooser);
+inline GType (*gtk_font_chooser_get_type)(void);
+inline void (*gtk_font_chooser_set_font)(
+	GtkFontChooser *fontchooser,
+	const gchar *fontname);
+inline GtkWidget *(*gtk_frame_new)(const gchar *label);
+inline guint32 (*gtk_get_current_event_time)(void);
+inline GtkIconSet *(*gtk_icon_factory_lookup_default)(const gchar *stock_id);
+inline GdkPixbuf *(*gtk_icon_info_load_icon)(
+	GtkIconInfo *icon_info,
+	GError **error);
+inline GdkPixbuf *(*gtk_icon_set_render_icon_pixbuf)(
+	GtkIconSet *icon_set,
+	GtkStyleContext *context,
+	GtkIconSize size);
+inline GtkIconTheme *(*gtk_icon_theme_get_default)(void);
+inline GtkIconInfo *(*gtk_icon_theme_lookup_by_gicon)(
+	GtkIconTheme *icon_theme,
+	GIcon *icon,
+	gint size,
+	GtkIconLookupFlags flags);
+inline GType (*gtk_image_get_type)(void);
+inline GtkWidget *(*gtk_image_new)(void);
+inline void (*gtk_image_set_from_pixbuf)(GtkImage *image, GdkPixbuf *pixbuf);
+inline void (*gtk_init)(int *argc, char ***argv);
+inline GtkWidget *(*gtk_menu_bar_new)(void);
+inline GType (*gtk_menu_get_type)(void);
+inline GType (*gtk_menu_item_get_type)(void);
+inline GtkWidget *(*gtk_menu_item_new)(void);
+inline void (*gtk_menu_item_set_label)(GtkMenuItem *menu_item, const gchar *label);
+inline void (*gtk_menu_item_set_submenu)(GtkMenuItem *menu_item, GtkWidget *submenu);
+inline void (*gtk_menu_item_set_use_underline)(
+	GtkMenuItem *menu_item,
+	gboolean setting);
+inline GtkWidget *(*gtk_menu_new)(void);
+inline void (*gtk_menu_popdown)(GtkMenu *menu);
+inline void (*gtk_menu_popup)(
+	GtkMenu *menu,
+	GtkWidget *parent_menu_shell,
+	GtkWidget *parent_menu_item,
+	GtkMenuPositionFunc func,
+	gpointer data,
+	guint button,
+	guint32 activate_time);
+inline GType (*gtk_menu_shell_get_type)(void);
+inline void (*gtk_menu_shell_insert)(
+	GtkMenuShell *menu_shell,
+	GtkWidget *child,
+	gint position);
+inline void (*gtk_menu_shell_select_item)(
+	GtkMenuShell *menu_shell,
+	GtkWidget *menu_item);
+inline GtkWidget *(*gtk_notebook_new)(void);
+inline GtkWidget *(*gtk_offscreen_window_new)(void);
+inline GtkWidget *(*gtk_progress_bar_new)(void);
+inline GtkWidget *(*gtk_radio_button_new)(GSList* group);
+inline GtkWidget *(*gtk_separator_menu_item_new)(void);
+inline GtkSettings *(*gtk_settings_get_default)(void);
+inline GtkWidget *(*gtk_statusbar_new)(void);
+inline void (*gtk_style_context_get_background_color)(
+	GtkStyleContext *context,
+	GtkStateFlags state,
+	GdkRGBA *color);
+inline void (*gtk_style_context_get_border_color)(
+	GtkStyleContext *context,
+	GtkStateFlags state,
+	GdkRGBA *color);
+inline void (*gtk_style_context_get_color)(
+	GtkStyleContext *context,
+	GtkStateFlags state,
+	GdkRGBA *color);
+inline const PangoFontDescription *(*gtk_style_context_get_font)(
+	GtkStyleContext *context,
+	GtkStateFlags state);
+inline gboolean (*gtk_style_context_lookup_color)(
+	GtkStyleContext *context,
+	const gchar *color_name,
+	GdkRGBA *color);
+inline GtkWidget *(*gtk_toolbar_new)(void);
+inline GtkWidget *(*gtk_tree_view_new)(void);
+inline void (*gtk_widget_destroy)(GtkWidget *widget);
+inline gint (*gtk_widget_get_scale_factor)(GtkWidget *widget);
+inline GtkStyleContext *(*gtk_widget_get_style_context)(GtkWidget *widget);
+inline GType (*gtk_widget_get_type)(void);
+inline GdkWindow *(*gtk_widget_get_window)(GtkWidget *widget);
+inline void (*gtk_widget_hide)(GtkWidget *widget);
+inline gboolean (*gtk_widget_hide_on_delete)(GtkWidget *widget);
+inline void (*gtk_widget_realize)(GtkWidget *widget);
+inline void (*gtk_widget_set_sensitive)(GtkWidget *widget, gboolean sensitive);
+inline void (*gtk_widget_set_visible)(GtkWidget *widget, gboolean visible);
+inline void (*gtk_widget_show)(GtkWidget *widget);
+inline GType (*gtk_window_get_type)(void);
+inline GtkWidget *(*gtk_window_new)(GtkWindowType type);
+inline void (*gtk_window_set_title)(GtkWindow *window, const gchar *title);
+inline void (*gtk_window_set_transient_for)(GtkWindow *window, GtkWindow *parent);
+inline void (*pango_font_description_free)(PangoFontDescription *desc);
+inline PangoFontDescription *(*pango_font_description_from_string)(const char *str);
+inline const char *(*pango_font_description_get_family)(
+	const PangoFontDescription *desc);
+inline gint (*pango_font_description_get_size)(const PangoFontDescription *desc);
+inline PangoStyle (*pango_font_description_get_style)(
+	const PangoFontDescription *desc);
+inline PangoWeight (*pango_font_description_get_weight)(
+	const PangoFontDescription *desc);
+inline PangoFontDescription *(*pango_font_description_new)(void);
+inline void (*pango_font_description_set_family)(
+	PangoFontDescription *desc,
+	const char *family);
+inline void (*pango_font_description_set_size)(
+	PangoFontDescription *desc,
+	gint size);
+inline void (*pango_font_description_set_style)(
+	PangoFontDescription *desc,
+	PangoStyle style);
+inline void (*pango_font_description_set_weight)(
+	PangoFontDescription *desc,
+	PangoWeight weight);
+inline char *(*pango_font_description_to_string)(const PangoFontDescription *desc);
+inline GType (*pango_font_face_get_type)(void);
+inline GType (*pango_font_family_get_type)(void);
diff --git a/src/plugins/platformthemes/gtk3/qgtk3interface.cpp b/src/plugins/platformthemes/gtk3/qgtk3interface.cpp
index d802f2d1db..ed10c1f052 100644
--- a/src/plugins/platformthemes/gtk3/qgtk3interface.cpp
+++ b/src/plugins/platformthemes/gtk3/qgtk3interface.cpp
@@ -19,6 +19,8 @@
 #include <QtCore/QFileInfo>
 #include <QtGui/QFontDatabase>
 
+#include "qgtk3functions.h"
+
 QT_BEGIN_NAMESPACE
 Q_LOGGING_CATEGORY(lcQGtk3Interface, "qt.qpa.gtk");
 
@@ -276,7 +278,7 @@ QImage QGtk3Interface::qt_gtk_get_icon(const char* iconName) const
     The ability to convert GdkPixbuf to QImage relies on the following assumptions:
     \list
     \li QImage uses uchar as a data container (unasserted)
-    \li the types guint8 and uchar are identical (statically asserted)
+    \li the types guchar and uchar are identical (statically asserted)
     \li GDK pixel buffer uses 8 bits per sample (assumed at runtime)
     \li GDK pixel buffer has 4 channels (assumed at runtime)
     \endlist
@@ -286,9 +288,9 @@ QImage QGtk3Interface::qt_convert_gdk_pixbuf(GdkPixbuf *buf) const
     if (!buf)
         return QImage();
 
-    const guint8 *gdata = gdk_pixbuf_read_pixels(buf);
+    const guchar *gdata = gdk_pixbuf_get_pixels(buf);
     static_assert(std::is_same<decltype(gdata), const uchar *>::value,
-            "guint8 has diverted from uchar. Code needs fixing.");
+            "guchar has diverted from uchar. Code needs fixing.");
     Q_ASSUME(gdk_pixbuf_get_bits_per_sample(buf) == 8);
     Q_ASSUME(gdk_pixbuf_get_n_channels(buf) == 4);
     const uchar *data = static_cast<const uchar *>(gdata);
diff --git a/src/plugins/platformthemes/gtk3/qgtk3menu.cpp b/src/plugins/platformthemes/gtk3/qgtk3menu.cpp
index c4ea0e5e33..93c7ae9ff9 100644
--- a/src/plugins/platformthemes/gtk3/qgtk3menu.cpp
+++ b/src/plugins/platformthemes/gtk3/qgtk3menu.cpp
@@ -10,6 +10,8 @@
 #undef signals
 #include <gtk/gtk.h>
 
+#include "qgtk3functions.h"
+
 QT_BEGIN_NAMESPACE
 
 #if QT_CONFIG(shortcut)
diff --git a/src/plugins/platformthemes/gtk3/qgtk3theme.cpp b/src/plugins/platformthemes/gtk3/qgtk3theme.cpp
index 1df4cf94a3..b3e1208894 100644
--- a/src/plugins/platformthemes/gtk3/qgtk3theme.cpp
+++ b/src/plugins/platformthemes/gtk3/qgtk3theme.cpp
@@ -15,6 +15,8 @@
 #include <X11/Xlib.h>
 #endif
 
+#include "qgtk3functions.h"
+
 QT_BEGIN_NAMESPACE
 
 using namespace Qt::StringLiterals;
