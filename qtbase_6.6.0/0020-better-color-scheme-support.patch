This patch allows to subscribe to color-scheme changes in application code and force Qt to update the value with QWindowSystemInterface::handleThemeChange().

This also fixes mapping for the no preference value which most applications would like to handle the same as light.
---
diff --git a/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportaltheme.cpp b/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportaltheme.cpp
index a31c8b6105..a82003caed 100644
--- a/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportaltheme.cpp
+++ b/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportaltheme.cpp
@@ -57,14 +57,12 @@ public:
     {
         switch (colorschemePref) {
             case PreferDark: return Qt::ColorScheme::Dark;
-            case PreferLight: return Qt::ColorScheme::Light;
-            default: return Qt::ColorScheme::Unknown;
+            default: return Qt::ColorScheme::Light;
         }
     }
 
     QPlatformTheme *baseTheme = nullptr;
     uint fileChooserPortalVersion = 0;
-    Qt::ColorScheme colorScheme = Qt::ColorScheme::Unknown;
 };
 
 QXdgDesktopPortalTheme::QXdgDesktopPortalTheme()
@@ -111,21 +109,6 @@ QXdgDesktopPortalTheme::QXdgDesktopPortalTheme()
         }
         watcher->deleteLater();
     });
-
-    // Get information about system theme preference
-    message = QDBusMessage::createMethodCall("org.freedesktop.portal.Desktop"_L1,
-                                             "/org/freedesktop/portal/desktop"_L1,
-                                             "org.freedesktop.portal.Settings"_L1,
-                                             "Read"_L1);
-    message << "org.freedesktop.appearance"_L1 << "color-scheme"_L1;
-
-    // this must not be asyncCall() because we have to set appearance now
-    QDBusReply<QVariant> reply = QDBusConnection::sessionBus().call(message);
-    if (reply.isValid()) {
-        const QDBusVariant dbusVariant = qvariant_cast<QDBusVariant>(reply.value());
-        const QXdgDesktopPortalThemePrivate::XdgColorschemePref xdgPref = static_cast<QXdgDesktopPortalThemePrivate::XdgColorschemePref>(dbusVariant.variant().toUInt());
-        d->colorScheme = QXdgDesktopPortalThemePrivate::colorSchemeFromXdgPref(xdgPref);
-    }
 }
 
 QPlatformMenuItem* QXdgDesktopPortalTheme::createPlatformMenuItem() const
@@ -208,9 +191,26 @@ QVariant QXdgDesktopPortalTheme::themeHint(ThemeHint hint) const
 Qt::ColorScheme QXdgDesktopPortalTheme::colorScheme() const
 {
     Q_D(const QXdgDesktopPortalTheme);
-    if (d->colorScheme == Qt::ColorScheme::Unknown)
+    Qt::ColorScheme colorScheme = Qt::ColorScheme::Unknown;
+
+    // Get information about system theme preference
+    QDBusMessage message = QDBusMessage::createMethodCall("org.freedesktop.portal.Desktop"_L1,
+                                                          "/org/freedesktop/portal/desktop"_L1,
+                                                          "org.freedesktop.portal.Settings"_L1,
+                                                          "Read"_L1);
+    message << "org.freedesktop.appearance"_L1 << "color-scheme"_L1;
+
+    // this must not be asyncCall() because we have to set appearance now
+    QDBusReply<QVariant> reply = QDBusConnection::sessionBus().call(message);
+    if (reply.isValid()) {
+        const QDBusVariant dbusVariant = qvariant_cast<QDBusVariant>(reply.value());
+        const QXdgDesktopPortalThemePrivate::XdgColorschemePref xdgPref = static_cast<QXdgDesktopPortalThemePrivate::XdgColorschemePref>(dbusVariant.variant().toUInt());
+        colorScheme = QXdgDesktopPortalThemePrivate::colorSchemeFromXdgPref(xdgPref);
+    }
+
+    if (colorScheme == Qt::ColorScheme::Unknown)
         return d->baseTheme->colorScheme();
-    return d->colorScheme;
+    return colorScheme;
 }
 
 QPixmap QXdgDesktopPortalTheme::standardPixmap(StandardPixmap sp, const QSizeF &size) const
