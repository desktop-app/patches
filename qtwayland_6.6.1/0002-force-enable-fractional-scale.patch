diff --git a/src/client/qwaylandinputdevice.cpp b/src/client/qwaylandinputdevice.cpp
index a4f8757e..1585ecfa 100644
--- a/src/client/qwaylandinputdevice.cpp
+++ b/src/client/qwaylandinputdevice.cpp
@@ -216,7 +216,7 @@ public:
     {
         int scale = 0;
         for (auto *screen : m_screens)
-            scale = qMax(scale, screen->scale());
+            scale = qMax(scale, int(std::ceil(screen->scale())));
         return scale;
     }
 
diff --git a/src/client/qwaylandintegration.cpp b/src/client/qwaylandintegration.cpp
index 88a2fa7e..2e9496ad 100644
--- a/src/client/qwaylandintegration.cpp
+++ b/src/client/qwaylandintegration.cpp
@@ -36,6 +36,7 @@
 #include <QtGui/QOpenGLContext>
 #endif // QT_CONFIG(opengl)
 #include <QSocketNotifier>
+#include <QTimer>
 
 #include <qpa/qplatforminputcontextfactory_p.h>
 #include <qpa/qplatformaccessibility.h>
@@ -194,6 +195,14 @@ void QWaylandIntegration::initialize()
 
     // Qt does not support running with no screens
     mDisplay->ensureScreen();
+
+    QTimer::singleShot(0, qApp, [this] {
+        if (mDisplay->viewporter() && qApp->property("_q_force_wayland_fractional_scale").toBool()) {
+            for (QWaylandScreen *screen : mDisplay->screens())
+                screen->maybeInitialize();
+            QWindowSystemInterface::flushWindowSystemEvents();
+        }
+    });
 }
 
 QPlatformFontDatabase *QWaylandIntegration::fontDatabase() const
diff --git a/src/client/qwaylandscreen.cpp b/src/client/qwaylandscreen.cpp
index 7c4f1bdf..970e4374 100644
--- a/src/client/qwaylandscreen.cpp
+++ b/src/client/qwaylandscreen.cpp
@@ -17,6 +17,10 @@ QT_BEGIN_NAMESPACE
 
 namespace QtWaylandClient {
 
+static bool fractionalScaleFixNeeded(QWaylandDisplay* display) {
+    return display->viewporter() && qApp->property("_q_force_wayland_fractional_scale").toBool();
+}
+
 QWaylandXdgOutputManagerV1::QWaylandXdgOutputManagerV1(QWaylandDisplay* display, uint id, uint version)
     : QtWayland::zxdg_output_manager_v1(display->wl_registry(), id, qMin(3u, version))
 {
@@ -168,7 +172,7 @@ Qt::ScreenOrientation QWaylandScreen::orientation() const
     return m_orientation;
 }
 
-int QWaylandScreen::scale() const
+qreal QWaylandScreen::scale() const
 {
     return mScale;
 }
@@ -238,7 +242,8 @@ void QWaylandScreen::output_geometry(int32_t x, int32_t y,
 
 void QWaylandScreen::output_scale(int32_t factor)
 {
-    mScale = factor;
+    if (!zxdg_output_v1::isInitialized() || !fractionalScaleFixNeeded(mWaylandDisplay))
+        mScale = factor;
 }
 
 void QWaylandScreen::output_done()
@@ -324,7 +329,12 @@ void QWaylandScreen::zxdg_output_v1_name(const QString &name)
 void QWaylandScreen::updateXdgOutputProperties()
 {
     Q_ASSERT(zxdg_output_v1::isInitialized());
+    if (fractionalScaleFixNeeded(mWaylandDisplay))
+        mScale = (qreal(mGeometry.width()) / qreal(mXdgGeometry.width())
+            + qreal(mGeometry.height()) / qreal(mXdgGeometry.height())) * qreal(0.5);
+    const QDpi dpi = logicalDpi();
     QWindowSystemInterface::handleScreenGeometryChange(screen(), geometry(), geometry());
+    QWindowSystemInterface::handleScreenLogicalDotsPerInchChange(screen(), dpi.first, dpi.second);
 }
 
 } // namespace QtWaylandClient
diff --git a/src/client/qwaylandscreen_p.h b/src/client/qwaylandscreen_p.h
index 4499f0ee..10efc284 100644
--- a/src/client/qwaylandscreen_p.h
+++ b/src/client/qwaylandscreen_p.h
@@ -63,7 +63,7 @@ public:
     QList<QPlatformScreen *> virtualSiblings() const override;
 
     Qt::ScreenOrientation orientation() const override;
-    int scale() const;
+    qreal scale() const;
     qreal devicePixelRatio() const override;
     qreal refreshRate() const override;
 
@@ -114,7 +114,7 @@ protected:
     QString mModel;
     QRect mGeometry;
     QRect mXdgGeometry;
-    int mScale = 1;
+    qreal mScale = 1;
     int mDepth = 32;
     int mRefreshRate = 60000;
     int mTransform = -1;
diff --git a/src/client/qwaylandwindow.cpp b/src/client/qwaylandwindow.cpp
index b81e00ef..5ccc17af 100644
--- a/src/client/qwaylandwindow.cpp
+++ b/src/client/qwaylandwindow.cpp
@@ -56,7 +56,7 @@ QWaylandWindow::QWaylandWindow(QWindow *window, QWaylandDisplay *display)
             mFrameCallbackTimeout = frameCallbackTimeout;
     }
 
-    mScale = waylandScreen() ? waylandScreen()->scale() : 1; // fallback to 1 if we don't have a real screen
+    mScale = waylandScreen() ? waylandScreen()->scale() : qreal(1); // fallback to 1 if we don't have a real screen
 
     static WId id = 1;
     mWindowId = id++;
@@ -1395,7 +1395,7 @@ void QWaylandWindow::handleScreensChanged()
     if (mFractionalScale)
         return;
 
-    int scale = mLastReportedScreen->isPlaceholder() ? 1 : static_cast<QWaylandScreen *>(mLastReportedScreen)->scale();
+    qreal scale = mLastReportedScreen->isPlaceholder() ? qreal(1) : static_cast<QWaylandScreen *>(mLastReportedScreen)->scale();
 
     if (scale != mScale) {
         mScale = scale;
@@ -1413,7 +1413,7 @@ void QWaylandWindow::handleScreensChanged()
 #if QT_CONFIG(cursor)
 void QWaylandWindow::setMouseCursor(QWaylandInputDevice *device, const QCursor &cursor)
 {
-    int fallbackBufferScale = int(devicePixelRatio());
+    int fallbackBufferScale = int(std::ceil(devicePixelRatio()));
     device->setCursor(&cursor, {}, fallbackBufferScale);
 }
 
