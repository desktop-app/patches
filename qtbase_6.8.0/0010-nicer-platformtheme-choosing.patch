diff --git a/src/gui/kernel/qguiapplication.cpp b/src/gui/kernel/qguiapplication.cpp
index 3030e11f25..b4a693c209 100644
--- a/src/gui/kernel/qguiapplication.cpp
+++ b/src/gui/kernel/qguiapplication.cpp
@@ -131,6 +131,7 @@ Q_CONSTINIT QGuiApplicationPrivate::QLastCursorPosition QGuiApplicationPrivate::
 
 Q_CONSTINIT QWindow *QGuiApplicationPrivate::currentMouseWindow = nullptr;
 
+Q_CONSTINIT QString QGuiApplicationPrivate::platformThemeOverride;
 Q_CONSTINIT QString QGuiApplicationPrivate::styleOverride;
 
 Q_CONSTINIT Qt::ApplicationState QGuiApplicationPrivate::applicationState = Qt::ApplicationInactive;
@@ -239,15 +240,6 @@ static void initThemeHints()
     touchDoubleTapDistance = QGuiApplicationPrivate::platformTheme()->themeHint(QPlatformTheme::TouchDoubleTapDistance).toInt();
 }
 
-static bool checkNeedPortalSupport()
-{
-#if QT_CONFIG(dbus)
-    return QFileInfo::exists("/.flatpak-info"_L1) || qEnvironmentVariableIsSet("SNAP");
-#else
-    return false;
-#endif // QT_CONFIG(dbus)
-}
-
 // Using aggregate initialization instead of ctor so we can have a POD global static
 #define Q_WINDOW_GEOMETRY_SPECIFICATION_INITIALIZER { Qt::TopLeftCorner, -1, -1, -1, -1 }
 
@@ -1263,12 +1255,11 @@ Q_LOGGING_CATEGORY(lcQpaPluginLoading, "qt.qpa.plugin");
 Q_LOGGING_CATEGORY(lcQpaTheme, "qt.qpa.theme");
 Q_LOGGING_CATEGORY(lcPtrDispatch, "qt.pointer.dispatch");
 
-static void init_platform(const QString &pluginNamesWithArguments, const QString &platformPluginPath, const QString &platformThemeName, int &argc, char **argv)
+static void init_platform(const QString &pluginNamesWithArguments, const QString &platformPluginPath, int &argc, char **argv)
 {
     qCDebug(lcQpaPluginLoading) << "init_platform called with"
         << "pluginNamesWithArguments" << pluginNamesWithArguments
-        << "platformPluginPath" << platformPluginPath
-        << "platformThemeName" << platformThemeName;
+        << "platformPluginPath" << platformPluginPath;
 
     QStringList plugins = pluginNamesWithArguments.split(u';', Qt::SkipEmptyParts);
     QStringList platformArguments;
@@ -1333,21 +1324,23 @@ static void init_platform(const QString &pluginNamesWithArguments, const QString
 
     // 1) Fetch the platform name from the environment if present.
     QStringList themeNames;
-    if (!platformThemeName.isEmpty()) {
-        qCDebug(lcQpaTheme) << "Adding" << platformThemeName << "from environment to list of theme names";
-        themeNames.append(platformThemeName);
+    if (!QGuiApplicationPrivate::platformThemeOverride.isEmpty()) {
+        qCDebug(lcQpaTheme) << "Adding" << QGuiApplicationPrivate::platformThemeOverride << "from environment to list of theme names";
+        themeNames.append(QGuiApplicationPrivate::platformThemeOverride);
     }
 
-    // 2) Special case - check whether it's a flatpak or snap app to use xdg-desktop-portal platform theme for portals support
-    if (checkNeedPortalSupport()) {
-        qCDebug(lcQpaTheme) << "Adding xdgdesktopportal to list of theme names";
-        themeNames.append(QStringLiteral("xdgdesktopportal"));
-    }
-
-    // 3) Ask the platform integration for a list of theme names
+    // 2) Ask the platform integration for a list of theme names
     const auto platformIntegrationThemeNames = QGuiApplicationPrivate::platform_integration->themeNames();
     qCDebug(lcQpaTheme) << "Adding platform integration's theme names to list of theme names:" << platformIntegrationThemeNames;
     themeNames += platformIntegrationThemeNames;
+
+    // 3) Special case - prefer xdgdesktopportal
+    if (themeNames.indexOf(QStringLiteral("xdgdesktopportal")) > 0) {
+        qCDebug(lcQpaTheme) << "Moving xdgdesktopportal to the front of list of theme names";
+        themeNames.removeAll(QStringLiteral("xdgdesktopportal"));
+        themeNames.prepend(QStringLiteral("xdgdesktopportal"));
+    }
+
     // 4) Look for a theme plugin.
     for (const QString &themeName : std::as_const(themeNames)) {
         qCDebug(lcQpaTheme) << "Attempting to create platform theme" << themeName << "via QPlatformThemeFactory::create";
@@ -1526,7 +1519,7 @@ void QGuiApplicationPrivate::createPlatformIntegration()
         platformExplicitlySelected = true;
     }
 
-    QString platformThemeName = QString::fromLocal8Bit(qgetenv("QT_QPA_PLATFORMTHEME"));
+    platformThemeOverride = QString::fromLocal8Bit(qgetenv("QT_QPA_PLATFORMTHEME"));
 
     // Get command line params
 
@@ -1554,7 +1547,7 @@ void QGuiApplicationPrivate::createPlatformIntegration()
             }
         } else if (strcmp(arg, "-platformtheme") == 0) {
             if (++i < argc)
-                platformThemeName = QString::fromLocal8Bit(argv[i]);
+                platformThemeOverride = QString::fromLocal8Bit(argv[i]);
         } else if (strcmp(arg, "-qwindowgeometry") == 0 || (xcbIsDefault && strcmp(arg, "-geometry") == 0)) {
             if (++i < argc)
                 windowGeometrySpecification = QWindowGeometrySpecification::fromArgument(argv[i]);
@@ -1577,7 +1570,7 @@ void QGuiApplicationPrivate::createPlatformIntegration()
 
     Q_UNUSED(platformExplicitlySelected);
 
-    init_platform(QLatin1StringView(platformName), platformPluginPath, platformThemeName, argc, argv);
+    init_platform(QLatin1StringView(platformName), platformPluginPath, argc, argv);
     if (const QPlatformTheme *theme = platformTheme())
         QStyleHintsPrivate::get(QGuiApplication::styleHints())->updateColorScheme(theme->colorScheme());
 
diff --git a/src/gui/kernel/qguiapplication_p.h b/src/gui/kernel/qguiapplication_p.h
index 45eac1c265..97d166e1a3 100644
--- a/src/gui/kernel/qguiapplication_p.h
+++ b/src/gui/kernel/qguiapplication_p.h
@@ -278,6 +278,7 @@ public:
 
     static QFont *app_font;
 
+    static QString platformThemeOverride;
     static QString styleOverride;
     static QStyleHints *styleHints;
     static bool obey_desktop_settings;
diff --git a/src/gui/platform/unix/qgenericunixthemes.cpp b/src/gui/platform/unix/qgenericunixthemes.cpp
index d488247d9a..64477767aa 100644
--- a/src/gui/platform/unix/qgenericunixthemes.cpp
+++ b/src/gui/platform/unix/qgenericunixthemes.cpp
@@ -1497,25 +1497,13 @@ QStringList QGenericUnixTheme::themeNames()
     QStringList result;
     if (QGuiApplication::desktopSettingsAware()) {
         const QByteArray desktopEnvironment = QGuiApplicationPrivate::platformIntegration()->services()->desktopEnvironment();
-        QList<QByteArray> gtkBasedEnvironments;
-        gtkBasedEnvironments << "GNOME"
-                             << "X-CINNAMON"
-                             << "PANTHEON"
-                             << "UNITY"
-                             << "MATE"
-                             << "XFCE"
-                             << "LXDE";
         const QList<QByteArray> desktopNames = desktopEnvironment.split(':');
+        result.push_back(QStringLiteral("xdgdesktopportal"));
         for (const QByteArray &desktopName : desktopNames) {
             if (desktopEnvironment == "KDE") {
 #if QT_CONFIG(settings)
                 result.push_back(QLatin1StringView(QKdeTheme::name));
 #endif
-            } else if (gtkBasedEnvironments.contains(desktopName)) {
-                // prefer the GTK3 theme implementation with native dialogs etc.
-                result.push_back(QStringLiteral("gtk3"));
-                // fallback to the generic Gnome theme if loading the GTK3 theme fails
-                result.push_back(QLatin1StringView(QGnomeTheme::name));
             } else {
                 // unknown, but lowercase the name (our standard practice) and
                 // remove any "x-" prefix
@@ -1523,6 +1511,10 @@ QStringList QGenericUnixTheme::themeNames()
                 result.push_back(s.startsWith("x-"_L1) ? s.mid(2) : s);
             }
         }
+        // prefer the GTK3 theme implementation with native dialogs etc.
+        result.push_back(QStringLiteral("gtk3"));
+        // fallback to the generic Gnome theme if loading the GTK3 theme fails
+        result.push_back(QLatin1StringView(QGnomeTheme::name));
     } // desktopSettingsAware
     result.append(QLatin1StringView(QGenericUnixTheme::name));
     return result;
diff --git a/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportaltheme.cpp b/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportaltheme.cpp
index 355d3e6cc9..199a1d1893 100644
--- a/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportaltheme.cpp
+++ b/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportaltheme.cpp
@@ -85,7 +85,12 @@ QXdgDesktopPortalTheme::QXdgDesktopPortalTheme()
     Q_D(QXdgDesktopPortalTheme);
 
     QStringList themeNames;
+    if (!QGuiApplicationPrivate::platformThemeOverride.isEmpty())
+        themeNames += QGuiApplicationPrivate::platformThemeOverride;
     themeNames += QGuiApplicationPrivate::platform_integration->themeNames();
+    themeNames.removeAll(QStringLiteral("xdgdesktopportal"));
+    themeNames.removeAll(QStringLiteral("flatpak"));
+    themeNames.removeAll(QStringLiteral("snap"));
     // 1) Look for a theme plugin.
     for (const QString &themeName : std::as_const(themeNames)) {
         d->baseTheme = QPlatformThemeFactory::create(themeName, nullptr);
