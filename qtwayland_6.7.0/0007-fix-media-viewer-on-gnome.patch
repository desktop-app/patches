diff --git a/src/client/qwaylandwindow.cpp b/src/client/qwaylandwindow.cpp
index 3d72d5d0..9d63b0a8 100644
--- a/src/client/qwaylandwindow.cpp
+++ b/src/client/qwaylandwindow.cpp
@@ -648,7 +648,7 @@ void QWaylandWindow::doApplyConfigureFromOtherThread()
     if (!mCanResize || !mWaitingToApplyConfigure)
         return;
     doApplyConfigure();
-    sendRecursiveExposeEvent();
+    sendExposeEvent(QRect(QPoint(), geometry().size()));
 }
 
 void QWaylandWindow::setCanResize(bool canResize)
@@ -664,7 +664,7 @@ void QWaylandWindow::setCanResize(bool canResize)
             bool inGuiThread = QThread::currentThreadId() == QThreadData::get2(thread())->threadId.loadRelaxed();
             if (inGuiThread) {
                 doApplyConfigure();
-                sendRecursiveExposeEvent();
+                sendExposeEvent(QRect(QPoint(), geometry().size()));
             } else {
                 QMetaObject::invokeMethod(this, &QWaylandWindow::doApplyConfigureFromOtherThread, Qt::QueuedConnection);
             }
@@ -689,10 +689,9 @@ void QWaylandWindow::applyConfigure()
 
 void QWaylandWindow::sendRecursiveExposeEvent()
 {
-    if (!isExposed())
-        sendExposeEvent(QRect());
-    else
-        sendExposeEvent(QRect(QPoint(), geometry().size()));
+    if (!window()->isVisible())
+        return;
+    sendExposeEvent(QRect(QPoint(), geometry().size()));
 
     for (QWaylandSubSurface *subSurface : std::as_const(mChildren)) {
         auto subWindow = subSurface->window();
@@ -759,6 +758,16 @@ void QWaylandWindow::safeCommit(QWaylandBuffer *buffer, const QRegion &damage)
     }
 }
 
+void QWaylandWindow::handleExpose(const QRegion &region)
+{
+    QWindowSystemInterface::handleExposeEvent(window(), region);
+    if (mQueuedBuffer) {
+        commit(mQueuedBuffer, mQueuedBufferDamage);
+        mQueuedBuffer = nullptr;
+        mQueuedBufferDamage = QRegion();
+    }
+}
+
 void QWaylandWindow::commit(QWaylandBuffer *buffer, const QRegion &damage)
 {
     Q_ASSERT(isExposed());
diff --git a/src/client/qwaylandwindow_p.h b/src/client/qwaylandwindow_p.h
index f83a83d3..c2815cb8 100644
--- a/src/client/qwaylandwindow_p.h
+++ b/src/client/qwaylandwindow_p.h
@@ -113,6 +113,7 @@ public:
     void damage(const QRect &rect);
 
     void safeCommit(QWaylandBuffer *buffer, const QRegion &damage);
+    void handleExpose(const QRegion &region);
     void commit(QWaylandBuffer *buffer, const QRegion &damage);
 
     void commit();
diff --git a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell.cpp b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell.cpp
index 977657e5..b1050df1 100644
--- a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell.cpp
+++ b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell.cpp
@@ -1,6 +1,5 @@
 // Copyright (C) 2017 The Qt Company Ltd.
 // Copyright (C) 2017 Eurogiciel, author: <philippe.coval@eurogiciel.fr>
-// Copyright (C) 2023 David Edmundson <davidedmundson@kde.org>
 // SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
 
 #include "qwaylandxdgshell_p.h"
@@ -89,11 +88,10 @@ void QWaylandXdgSurface::Toplevel::applyConfigure()
         }
     }
 
-    m_applied = m_pending;
-
     if (!surfaceSize.isEmpty())
         m_xdgSurface->m_window->resizeFromApplyConfigure(surfaceSize.grownBy(m_xdgSurface->m_window->windowContentMargins()));
 
+    m_applied = m_pending;
     qCDebug(lcQpaWayland) << "Applied pending xdg_toplevel configure event:" << m_applied.size << m_applied.states;
 }
 
@@ -118,7 +116,6 @@ void QWaylandXdgSurface::Toplevel::xdg_toplevel_configure(int32_t width, int32_t
     auto *xdgStates = static_cast<uint32_t *>(states->data);
     size_t numStates = states->size / sizeof(uint32_t);
 
-    m_pending.suspended = false;
     m_pending.states = Qt::WindowNoState;
     m_toplevelStates = QWaylandWindow::WindowNoState;
 
@@ -145,9 +142,6 @@ void QWaylandXdgSurface::Toplevel::xdg_toplevel_configure(int32_t width, int32_t
         case XDG_TOPLEVEL_STATE_TILED_BOTTOM:
             m_toplevelStates |= QWaylandWindow::WindowTiledBottom;
             break;
-        case XDG_TOPLEVEL_STATE_SUSPENDED:
-            m_pending.suspended = true;
-            break;
         default:
             break;
         }
@@ -369,9 +363,6 @@ void QWaylandXdgSurface::setWindowFlags(Qt::WindowFlags flags)
 
 bool QWaylandXdgSurface::isExposed() const
 {
-    if (m_toplevel && m_toplevel->m_applied.suspended)
-        return false;
-
     return m_configured || m_pendingConfigureSerial;
 }
 
@@ -612,8 +603,8 @@ void QWaylandXdgSurface::xdg_surface_configure(uint32_t serial)
     if (!m_configured) {
         // We have to do the initial applyConfigure() immediately, since that is the expose.
         applyConfigure();
-        if (isExposed())
-            m_window->sendRecursiveExposeEvent();
+        QRegion exposeRegion = QRegion(QRect(QPoint(), m_window->geometry().size()));
+        m_window->handleExpose(exposeRegion);
     } else {
         // Later configures are probably resizes, so we have to queue them up for a time when we
         // are not painting to the window.
diff --git a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell_p.h b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell_p.h
index 0310706f..59b96756 100644
--- a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell_p.h
+++ b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell_p.h
@@ -101,7 +101,6 @@ private:
             QSize bounds = {0, 0};
             QSize size = {0, 0};
             Qt::WindowStates states = Qt::WindowNoState;
-            bool suspended = false;
         }  m_pending, m_applied;
         QWaylandWindow::ToplevelWindowTilingStates m_toplevelStates = QWaylandWindow::WindowNoState;
         QSize m_normalSize;
diff --git a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshellintegration.cpp b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshellintegration.cpp
index f1bb8bee..c7b757dd 100644
--- a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshellintegration.cpp
+++ b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshellintegration.cpp
@@ -12,7 +12,7 @@ QT_BEGIN_NAMESPACE
 
 namespace QtWaylandClient {
 
-QWaylandXdgShellIntegration::QWaylandXdgShellIntegration() : QWaylandShellIntegrationTemplate(6)
+QWaylandXdgShellIntegration::QWaylandXdgShellIntegration() : QWaylandShellIntegrationTemplate(4)
 {
     connect(this, &QWaylandShellIntegrationTemplate::activeChanged, this, [this] {
         if (isActive()) {
