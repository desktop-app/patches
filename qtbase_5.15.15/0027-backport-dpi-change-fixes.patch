diff --git a/src/gui/kernel/qguiapplication.cpp b/src/gui/kernel/qguiapplication.cpp
index c7ff2a6dacd..f88d6fe8deb 100644
--- a/src/gui/kernel/qguiapplication.cpp
+++ b/src/gui/kernel/qguiapplication.cpp
@@ -2548,11 +2548,6 @@ void QGuiApplicationPrivate::processWindowScreenChangedEvent(QWindowSystemInterf
             else // Fall back to default behavior, and try to find some appropriate screen
                 topLevelWindow->setScreen(nullptr);
         }
-        // we may have changed scaling, so trigger resize event if needed
-        if (window->handle()) {
-            QWindowSystemInterfacePrivate::GeometryChangeEvent gce(window, QHighDpi::fromNativePixels(window->handle()->geometry(), window));
-            processGeometryChangeEvent(&gce);
-        }
     }
 }
 
@@ -3209,6 +3204,10 @@ void QGuiApplicationPrivate::processScreenLogicalDotsPerInchChange(QWindowSystem
     emit s->logicalDotsPerInchChanged(s->logicalDotsPerInch());
     s->d_func()->updateGeometriesWithSignals();
 
+    for (QWindow *window : QGuiApplication::allWindows())
+        if (window->screen() == e->screen)
+            window->screenChanged(e->screen);
+
     resetCachedDevicePixelRatio();
 }
 
diff --git a/src/gui/kernel/qhighdpiscaling_p.h b/src/gui/kernel/qhighdpiscaling_p.h
index 5b02c5d646a..630ee0350db 100644
--- a/src/gui/kernel/qhighdpiscaling_p.h
+++ b/src/gui/kernel/qhighdpiscaling_p.h
@@ -187,7 +187,7 @@ inline QMargins scale(const QMargins &margins, qreal scaleFactor, QPoint origin
 template <typename T>
 QVector<T> scale(const QVector<T> &vector, qreal scaleFactor, QPoint origin = QPoint(0, 0))
 {
-    if (!QHighDpiScaling::isActive())
+    if (qFuzzyCompare(scaleFactor, qreal(1)))
         return vector;
 
     QVector<T> scaled;
@@ -199,7 +199,7 @@ QVector<T> scale(const QVector<T> &vector, qreal scaleFactor, QPoint origin = QP
 
 inline QRegion scale(const QRegion &region, qreal scaleFactor, QPoint origin = QPoint(0, 0))
 {
-    if (!QHighDpiScaling::isActive())
+    if (qFuzzyCompare(scaleFactor, qreal(1)))
         return region;
 
     QRegion scaled;
diff --git a/src/gui/kernel/qwindow.cpp b/src/gui/kernel/qwindow.cpp
index 639817257ea..3f30f5b40e9 100644
--- a/src/gui/kernel/qwindow.cpp
+++ b/src/gui/kernel/qwindow.cpp
@@ -244,6 +244,13 @@ void QWindowPrivate::init(QScreen *targetScreen)
     QGuiApplicationPrivate::window_list.prepend(q);
 
     requestedFormat = QSurfaceFormat::defaultFormat();
+
+    QObject::connect(q, &QWindow::screenChanged, q, [q, this](QScreen *){
+        if (q->handle()) {
+            QWindowSystemInterfacePrivate::GeometryChangeEvent gce(q, QHighDpi::fromNativePixels(q->handle()->geometry(), q));
+            QGuiApplicationPrivate::processGeometryChangeEvent(&gce);
+        }
+    });
 }
 
 /*!
diff --git a/src/gui/kernel/qwindowsysteminterface.cpp b/src/gui/kernel/qwindowsysteminterface.cpp
index 600cd9a7a52..4ab368d98cf 100644
--- a/src/gui/kernel/qwindowsysteminterface.cpp
+++ b/src/gui/kernel/qwindowsysteminterface.cpp
@@ -42,6 +42,7 @@
 #include "private/qguiapplication_p.h"
 #include "private/qevent_p.h"
 #include "private/qtouchdevice_p.h"
+#include "private/qscreen_p.h"
 #include <QAbstractEventDispatcher>
 #include <qpa/qplatformintegration.h>
 #include <qdebug.h>
@@ -822,6 +823,8 @@ void QWindowSystemInterface::handleScreenAdded(QPlatformScreen *ps, bool isPrima
         QGuiApplicationPrivate::screen_list.append(screen);
 
     QGuiApplicationPrivate::resetCachedDevicePixelRatio();
+    QHighDpiScaling::updateHighDpiScaling();
+    screen->d_func()->updateHighDpi();
 
     emit qGuiApp->screenAdded(screen);
 
@@ -879,6 +882,7 @@ void QWindowSystemInterface::handleScreenGeometryChange(QScreen *screen, const Q
 
 void QWindowSystemInterface::handleScreenLogicalDotsPerInchChange(QScreen *screen, qreal dpiX, qreal dpiY)
 {
+    QHighDpiScaling::updateHighDpiScaling();
     const QDpi effectiveDpi = QPlatformScreen::overrideDpi(QDpi{dpiX, dpiY});
     auto e = new QWindowSystemInterfacePrivate::ScreenLogicalDotsPerInchEvent(screen, effectiveDpi.first, effectiveDpi.second);
     QWindowSystemInterfacePrivate::handleWindowSystemEvent(e);
diff --git a/src/gui/painting/qbackingstore.cpp b/src/gui/painting/qbackingstore.cpp
index ebce163ed32..6143c5058de 100644
--- a/src/gui/painting/qbackingstore.cpp
+++ b/src/gui/painting/qbackingstore.cpp
@@ -66,6 +66,7 @@ public:
     QScopedPointer<QImage> highDpiBackingstore;
     QRegion staticContents;
     QSize size;
+    QSize nativeSize;
 };
 
 /*!
@@ -130,8 +131,7 @@ QWindow* QBackingStore::window() const
 
 void QBackingStore::beginPaint(const QRegion &region)
 {
-    if (d_ptr->highDpiBackingstore &&
-        d_ptr->highDpiBackingstore->devicePixelRatio() != d_ptr->window->devicePixelRatio())
+    if (d_ptr->nativeSize != QHighDpi::toNativePixels(size(), d_ptr->window))
         resize(size());
 
     QPlatformBackingStore *platformBackingStore = handle();
@@ -147,20 +147,23 @@ void QBackingStore::beginPaint(const QRegion &region)
     if (QHighDpiScaling::isActive() && device->devType() == QInternal::Image) {
         QImage *source = static_cast<QImage *>(device);
         const bool needsNewImage = d_ptr->highDpiBackingstore.isNull()
-            || source->data_ptr() != d_ptr->highDpiBackingstore->data_ptr()
+            || source->constBits() != d_ptr->highDpiBackingstore->constBits()
             || source->size() != d_ptr->highDpiBackingstore->size()
-            || source->devicePixelRatio() != d_ptr->highDpiBackingstore->devicePixelRatio();
+            || source->bytesPerLine() != d_ptr->highDpiBackingstore->bytesPerLine()
+            || source->format() != d_ptr->highDpiBackingstore->format();
         if (needsNewImage) {
             qCDebug(lcScaling) << "QBackingStore::beginPaint new backingstore for" << d_ptr->window;
             qCDebug(lcScaling) << "  source size" << source->size() << "dpr" << source->devicePixelRatio();
             d_ptr->highDpiBackingstore.reset(
                 new QImage(source->bits(), source->width(), source->height(), source->bytesPerLine(), source->format()));
-
-            qreal targetDevicePixelRatio = d_ptr->window->devicePixelRatio();
-            d_ptr->highDpiBackingstore->setDevicePixelRatio(targetDevicePixelRatio);
-            qCDebug(lcScaling) <<"  destination size" << d_ptr->highDpiBackingstore->size()
-                               << "dpr" << targetDevicePixelRatio;
         }
+
+        qreal targetDevicePixelRatio = d_ptr->window->devicePixelRatio();
+        d_ptr->highDpiBackingstore->setDevicePixelRatio(targetDevicePixelRatio);
+        qCDebug(lcScaling) <<"  destination size" << d_ptr->highDpiBackingstore->size()
+                           << "dpr" << targetDevicePixelRatio;
+    } else {
+        d_ptr->highDpiBackingstore.reset();
     }
 }
 
@@ -271,7 +274,8 @@ void QBackingStore::flush(const QRegion &region, QWindow *window, const QPoint &
 void QBackingStore::resize(const QSize &size)
 {
     d_ptr->size = size;
-    handle()->resize(QHighDpi::toNativePixels(size, d_ptr->window), d_ptr->staticContents);
+    d_ptr->nativeSize = QHighDpi::toNativePixels(size, d_ptr->window);
+    handle()->resize(d_ptr->nativeSize, d_ptr->staticContents);
 }
 
 /*!
diff --git a/src/plugins/platforms/windows/qwindowscontext.cpp b/src/plugins/platforms/windows/qwindowscontext.cpp
index 3e0059ca900..e529b27276b 100644
--- a/src/plugins/platforms/windows/qwindowscontext.cpp
+++ b/src/plugins/platforms/windows/qwindowscontext.cpp
@@ -1448,7 +1448,7 @@ bool QWindowsContext::windowsProc(HWND hwnd, UINT message,
         // WM_DPICHANGED is sent with a size that avoids resize loops (by
         // snapping back to the previous screen, see QTBUG-65580).
         const bool doResize = resizeOnDpiChanged(platformWindow->window());
-        if (doResize) {
+        if (doResize && !platformWindow->testFlag(QWindowsWindow::WithinSetGeometry)) {
             platformWindow->setFlag(QWindowsWindow::WithinDpiChanged);
             platformWindow->updateFullFrameMargins();
             const auto prcNewWindow = reinterpret_cast<RECT *>(lParam);
@@ -1457,6 +1457,7 @@ bool QWindowsContext::windowsProc(HWND hwnd, UINT message,
             SetWindowPos(hwnd, nullptr, prcNewWindow->left, prcNewWindow->top,
                          prcNewWindow->right - prcNewWindow->left,
                          prcNewWindow->bottom - prcNewWindow->top, SWP_NOZORDER | SWP_NOACTIVATE);
+            platformWindow->handleGeometryChange();
             platformWindow->clearFlag(QWindowsWindow::WithinDpiChanged);
         }
         platformWindow->checkForScreenChanged(QWindowsWindow::FromDpiChange);
diff --git a/src/plugins/platforms/windows/qwindowsscreen.cpp b/src/plugins/platforms/windows/qwindowsscreen.cpp
index 6aeecdb7fa7..056e08f0516 100644
--- a/src/plugins/platforms/windows/qwindowsscreen.cpp
+++ b/src/plugins/platforms/windows/qwindowsscreen.cpp
@@ -55,6 +55,7 @@
 #include <QtGui/qscreen.h>
 
 #include <QtCore/qdebug.h>
+#include <QtCore/qscopeguard.h>
 
 QT_BEGIN_NAMESPACE
 
@@ -592,7 +593,7 @@ const QWindowsScreen *QWindowsScreenManager::screenAtDp(const QPoint &p) const
     return nullptr;
 }
 
-const QWindowsScreen *QWindowsScreenManager::screenForHwnd(HWND hwnd) const
+const QWindowsScreen *QWindowsScreenManager::screenForHwnd(HWND hwnd)
 {
     HMONITOR hMonitor = MonitorFromWindow(hwnd, MONITOR_DEFAULTTONULL);
     if (hMonitor == nullptr)
@@ -604,6 +605,15 @@ const QWindowsScreen *QWindowsScreenManager::screenForHwnd(HWND hwnd) const
                          return s->data().hMonitor == hMonitor
                              && (s->data().flags & QWindowsScreenData::VirtualDesktop) != 0;
                      });
+    static bool inside = false;
+    if (it == m_screens.cend() && !inside) {
+        inside = true;
+        const auto guard = qScopeGuard([] {
+            inside = false;
+        });
+        handleScreenChanges();
+        return screenForHwnd(hwnd);
+    }
     return it != m_screens.cend() ? *it : nullptr;
 }
 
diff --git a/src/plugins/platforms/windows/qwindowsscreen.h b/src/plugins/platforms/windows/qwindowsscreen.h
index 5c095808f2d..c22c5ca50b7 100644
--- a/src/plugins/platforms/windows/qwindowsscreen.h
+++ b/src/plugins/platforms/windows/qwindowsscreen.h
@@ -138,7 +138,7 @@ public:
     const WindowsScreenList &screens() const { return m_screens; }
 
     const QWindowsScreen *screenAtDp(const QPoint &p) const;
-    const QWindowsScreen *screenForHwnd(HWND hwnd) const;
+    const QWindowsScreen *screenForHwnd(HWND hwnd);
 
     static bool isSingleScreen();
 
diff --git a/src/plugins/platforms/windows/qwindowswindow.cpp b/src/plugins/platforms/windows/qwindowswindow.cpp
index 9d9180e4f57..affaf7542c9 100644
--- a/src/plugins/platforms/windows/qwindowswindow.cpp
+++ b/src/plugins/platforms/windows/qwindowswindow.cpp
@@ -1939,12 +1939,12 @@ static inline bool equalDpi(const QDpi &d1, const QDpi &d2)
 
 void QWindowsWindow::checkForScreenChanged(ScreenChangeMode mode)
 {
-    if (parent() || QWindowsScreenManager::isSingleScreen())
+    if (parent())
         return;
 
-    QPlatformScreen *currentScreen = screen();
     const QWindowsScreen *newScreen =
         QWindowsContext::instance()->screenManager().screenForHwnd(m_data.hwnd);
+    QPlatformScreen *currentScreen = screen();
     if (newScreen == nullptr || newScreen == currentScreen)
         return;
     // For screens with different DPI: postpone until WM_DPICHANGE
@@ -1964,9 +1964,11 @@ void QWindowsWindow::handleGeometryChange()
 {
     const QRect previousGeometry = m_data.geometry;
     m_data.geometry = geometry_sys();
-    if (testFlag(WithinDpiChanged)
-        && QWindowsContext::instance()->screenManager().screenForHwnd(m_data.hwnd) != screen()) {
-        return; // QGuiApplication will send resize when screen actually changes
+    if (testFlag(WithinDpiChanged)) {
+        const QWindowsScreen *newScreen =
+            QWindowsContext::instance()->screenManager().screenForHwnd(m_data.hwnd);
+        if (newScreen != screen())
+            return; // QGuiApplication will send resize when screen actually changes
     }
     QWindowSystemInterface::handleGeometryChange(window(), m_data.geometry);
     // QTBUG-32121: OpenGL/normal windows (with exception of ANGLE) do not receive
diff --git a/src/plugins/platforms/windows/qwindowswindow.h b/src/plugins/platforms/windows/qwindowswindow.h
index ac207aa48f4..27d467c3c65 100644
--- a/src/plugins/platforms/windows/qwindowswindow.h
+++ b/src/plugins/platforms/windows/qwindowswindow.h
@@ -264,6 +264,7 @@ public:
     void propagateSizeHints() override;
     static bool handleGeometryChangingMessage(MSG *message, const QWindow *qWindow, const QMargins &marginsDp);
     bool handleGeometryChanging(MSG *message) const;
+    void handleGeometryChange();
     QMargins frameMargins() const override;
     QMargins fullFrameMargins() const override;
     void setFullFrameMargins(const QMargins &newMargins);
@@ -370,7 +371,6 @@ private:
     inline bool isDropSiteEnabled() const { return m_dropTarget != nullptr; }
     void setDropSiteEnabled(bool enabled);
     void updateDropSite(bool topLevel);
-    void handleGeometryChange();
     void handleWindowStateChange(Qt::WindowStates state);
     inline void destroyIcon();
     void fireExpose(const QRegion &region, bool force=false);
