diff --git a/src/client/qwaylandwindow.cpp b/src/client/qwaylandwindow.cpp
index f7c70048..441458bb 100644
--- a/src/client/qwaylandwindow.cpp
+++ b/src/client/qwaylandwindow.cpp
@@ -437,7 +437,7 @@ void QWaylandWindow::setGeometry(const QRect &r)
 
     if (mShellSurface && isExposed()) {
         mShellSurface->setWindowGeometry(windowContentGeometry());
-        if (!qt_window_private(window())->positionAutomatic)
+        if (!qt_window_private(window())->positionAutomatic && !mInResizeFromApplyConfigure)
             mShellSurface->setWindowPosition(windowGeometry().topLeft());
     }
 
diff --git a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell.cpp b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell.cpp
index 1872fff4..cbb3f32e 100644
--- a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell.cpp
+++ b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell.cpp
@@ -270,6 +270,14 @@ void QWaylandXdgSurface::Popup::xdg_popup_popup_done()
     m_xdgSurface->m_window->window()->close();
 }
 
+void QWaylandXdgSurface::Popup::xdg_popup_repositioned(uint32_t token)
+{
+    Q_UNUSED(token);
+    // The protocol only applies the move after the next commit after we ack the configure request
+    // Qt has already pushed the new frame by this point, so we need to manually trigger a new commit safely
+    m_xdgSurface->m_window->window()->requestUpdate();
+}
+
 QWaylandXdgSurface::QWaylandXdgSurface(QWaylandXdgShell *shell, ::xdg_surface *surface, QWaylandWindow *window)
     : QWaylandShellSurface(window)
     , xdg_surface(surface)
@@ -465,106 +473,9 @@ void QWaylandXdgSurface::setPopup(QWaylandWindow *parent)
 {
     Q_ASSERT(!m_toplevel && !m_popup);
 
-    auto positioner = new QtWayland::xdg_positioner(m_shell->m_xdgWmBase->create_positioner());
-    // set_popup expects a position relative to the parent
-    QRect windowGeometry = m_window->windowContentGeometry();
-    QMargins windowMargins = m_window->windowContentMargins() - m_window->clientSideMargins();
-    QMargins parentMargins = parent->windowContentMargins() - parent->clientSideMargins();
-
-    // These property overrides may be removed when public API becomes available
-    QRect placementAnchor = m_window->window()->property("_q_waylandPopupAnchorRect").toRect();
-    if (!placementAnchor.isValid()) {
-        placementAnchor = QRect(m_window->geometry().topLeft() - parent->geometry().topLeft(), QSize(1,1));
-    }
-    placementAnchor.translate(windowMargins.left(), windowMargins.top());
-    placementAnchor.translate(-parentMargins.left(), -parentMargins.top());
-
-    uint32_t anchor = QtWayland::xdg_positioner::anchor_top_right;
-    const QVariant anchorVariant = m_window->window()->property("_q_waylandPopupAnchor");
-    if (anchorVariant.isValid()) {
-        switch (anchorVariant.value<Qt::Edges>()) {
-        case Qt::Edges():
-            anchor = QtWayland::xdg_positioner::anchor_none;
-            break;
-        case Qt::TopEdge:
-            anchor = QtWayland::xdg_positioner::anchor_top;
-            break;
-        case Qt::TopEdge | Qt::RightEdge:
-            anchor = QtWayland::xdg_positioner::anchor_top_right;
-            break;
-        case Qt::RightEdge:
-            anchor = QtWayland::xdg_positioner::anchor_right;
-            break;
-        case Qt::BottomEdge | Qt::RightEdge:
-            anchor = QtWayland::xdg_positioner::anchor_bottom_right;
-            break;
-        case Qt::BottomEdge:
-            anchor = QtWayland::xdg_positioner::anchor_bottom;
-            break;
-        case Qt::BottomEdge | Qt::LeftEdge:
-            anchor = QtWayland::xdg_positioner::anchor_bottom_left;
-            break;
-        case Qt::LeftEdge:
-            anchor = QtWayland::xdg_positioner::anchor_left;
-            break;
-        case Qt::TopEdge | Qt::LeftEdge:
-            anchor = QtWayland::xdg_positioner::anchor_top_left;
-            break;
-        }
-    }
-
-    uint32_t gravity = QtWayland::xdg_positioner::gravity_bottom_right;
-    const QVariant popupGravityVariant = m_window->window()->property("_q_waylandPopupGravity");
-    if (popupGravityVariant.isValid()) {
-        switch (popupGravityVariant.value<Qt::Edges>()) {
-        case Qt::Edges():
-            gravity = QtWayland::xdg_positioner::gravity_none;
-            break;
-        case Qt::TopEdge:
-            gravity = QtWayland::xdg_positioner::gravity_top;
-            break;
-        case Qt::TopEdge | Qt::RightEdge:
-            gravity = QtWayland::xdg_positioner::gravity_top_right;
-            break;
-        case Qt::RightEdge:
-            gravity = QtWayland::xdg_positioner::gravity_right;
-            break;
-        case Qt::BottomEdge | Qt::RightEdge:
-            gravity = QtWayland::xdg_positioner::gravity_bottom_right;
-            break;
-        case Qt::BottomEdge:
-            gravity = QtWayland::xdg_positioner::gravity_bottom;
-            break;
-        case Qt::BottomEdge | Qt::LeftEdge:
-            gravity = QtWayland::xdg_positioner::gravity_bottom_left;
-            break;
-        case Qt::LeftEdge:
-            gravity = QtWayland::xdg_positioner::gravity_left;
-            break;
-        case Qt::TopEdge | Qt::LeftEdge:
-            gravity = QtWayland::xdg_positioner::gravity_top_left;
-            break;
-        }
-    }
-
-    uint32_t constraintAdjustment = QtWayland::xdg_positioner::constraint_adjustment_slide_x | QtWayland::xdg_positioner::constraint_adjustment_slide_y;
-    const QVariant constraintAdjustmentVariant = m_window->window()->property("_q_waylandPopupConstraintAdjustment");
-    if (constraintAdjustmentVariant.isValid()) {
-        constraintAdjustment = constraintAdjustmentVariant.toUInt();
-    }
-
-    positioner->set_anchor_rect(placementAnchor.x(),
-                                placementAnchor.y(),
-                                placementAnchor.width(),
-                                placementAnchor.height());
-    positioner->set_anchor(anchor);
-    positioner->set_gravity(gravity);
-    positioner->set_size(windowGeometry.width(), windowGeometry.height());
-    positioner->set_constraint_adjustment(constraintAdjustment);
-    m_popup = new Popup(this, parent, positioner);
+    std::unique_ptr<QtWayland::xdg_positioner> positioner = createPositioner(parent);
+    m_popup = new Popup(this, parent, positioner.get());
     positioner->destroy();
-
-    delete positioner;
 }
 
 void QWaylandXdgSurface::setGrabPopup(QWaylandWindow *parent, QWaylandInputDevice *device, int serial)
@@ -717,6 +628,126 @@ QString QWaylandXdgSurface::externWindowHandle()
     return m_toplevel->m_exported->handle();
 }
 
+void QWaylandXdgSurface::setWindowPosition(const QPoint &position)
+{
+    Q_UNUSED(position);
+
+    if (!m_popup)
+        return;
+
+    if (m_popup->version() < XDG_POPUP_REPOSITIONED_SINCE_VERSION) {
+        return;
+    }
+
+    QWaylandDisplay *display = m_window->display();
+
+    std::unique_ptr<QtWayland::xdg_positioner> positioner = createPositioner(m_window->transientParent());
+    m_popup->reposition(positioner->object(), display->lastInputSerial());
+    positioner->destroy();
+}
+
+std::unique_ptr<QtWayland::xdg_positioner> QWaylandXdgSurface::createPositioner(QWaylandWindow *parent)
+{
+    std::unique_ptr<QtWayland::xdg_positioner> positioner(new QtWayland::xdg_positioner(m_shell->m_xdgWmBase->create_positioner()));
+    // set_popup expects a position relative to the parent
+    QRect windowGeometry = m_window->windowContentGeometry();
+    QMargins windowMargins = m_window->windowContentMargins() - m_window->clientSideMargins();
+    QMargins parentMargins = parent->windowContentMargins() - parent->clientSideMargins();
+
+    // These property overrides may be removed when public API becomes available
+    QRect placementAnchor = m_window->window()->property("_q_waylandPopupAnchorRect").toRect();
+    if (!placementAnchor.isValid()) {
+        placementAnchor = QRect(m_window->geometry().topLeft() - parent->geometry().topLeft(), QSize(1,1));
+    }
+    placementAnchor.translate(windowMargins.left(), windowMargins.top());
+    placementAnchor.translate(-parentMargins.left(), -parentMargins.top());
+
+    uint32_t anchor = QtWayland::xdg_positioner::anchor_top_right;
+    const QVariant anchorVariant = m_window->window()->property("_q_waylandPopupAnchor");
+    if (anchorVariant.isValid()) {
+        switch (anchorVariant.value<Qt::Edges>()) {
+        case Qt::Edges():
+            anchor = QtWayland::xdg_positioner::anchor_none;
+            break;
+        case Qt::TopEdge:
+            anchor = QtWayland::xdg_positioner::anchor_top;
+            break;
+        case Qt::TopEdge | Qt::RightEdge:
+            anchor = QtWayland::xdg_positioner::anchor_top_right;
+            break;
+        case Qt::RightEdge:
+            anchor = QtWayland::xdg_positioner::anchor_right;
+            break;
+        case Qt::BottomEdge | Qt::RightEdge:
+            anchor = QtWayland::xdg_positioner::anchor_bottom_right;
+            break;
+        case Qt::BottomEdge:
+            anchor = QtWayland::xdg_positioner::anchor_bottom;
+            break;
+        case Qt::BottomEdge | Qt::LeftEdge:
+            anchor = QtWayland::xdg_positioner::anchor_bottom_left;
+            break;
+        case Qt::LeftEdge:
+            anchor = QtWayland::xdg_positioner::anchor_left;
+            break;
+        case Qt::TopEdge | Qt::LeftEdge:
+            anchor = QtWayland::xdg_positioner::anchor_top_left;
+            break;
+        }
+    }
+
+    uint32_t gravity = QtWayland::xdg_positioner::gravity_bottom_right;
+    const QVariant popupGravityVariant = m_window->window()->property("_q_waylandPopupGravity");
+    if (popupGravityVariant.isValid()) {
+        switch (popupGravityVariant.value<Qt::Edges>()) {
+        case Qt::Edges():
+            gravity = QtWayland::xdg_positioner::gravity_none;
+            break;
+        case Qt::TopEdge:
+            gravity = QtWayland::xdg_positioner::gravity_top;
+            break;
+        case Qt::TopEdge | Qt::RightEdge:
+            gravity = QtWayland::xdg_positioner::gravity_top_right;
+            break;
+        case Qt::RightEdge:
+            gravity = QtWayland::xdg_positioner::gravity_right;
+            break;
+        case Qt::BottomEdge | Qt::RightEdge:
+            gravity = QtWayland::xdg_positioner::gravity_bottom_right;
+            break;
+        case Qt::BottomEdge:
+            gravity = QtWayland::xdg_positioner::gravity_bottom;
+            break;
+        case Qt::BottomEdge | Qt::LeftEdge:
+            gravity = QtWayland::xdg_positioner::gravity_bottom_left;
+            break;
+        case Qt::LeftEdge:
+            gravity = QtWayland::xdg_positioner::gravity_left;
+            break;
+        case Qt::TopEdge | Qt::LeftEdge:
+            gravity = QtWayland::xdg_positioner::gravity_top_left;
+            break;
+        }
+    }
+
+    uint32_t constraintAdjustment = QtWayland::xdg_positioner::constraint_adjustment_slide_x | QtWayland::xdg_positioner::constraint_adjustment_slide_y;
+    const QVariant constraintAdjustmentVariant = m_window->window()->property("_q_waylandPopupConstraintAdjustment");
+    if (constraintAdjustmentVariant.isValid()) {
+        constraintAdjustment = constraintAdjustmentVariant.toUInt();
+    }
+
+    positioner->set_anchor_rect(placementAnchor.x(),
+                                placementAnchor.y(),
+                                placementAnchor.width(),
+                                placementAnchor.height());
+    positioner->set_anchor(anchor);
+    positioner->set_gravity(gravity);
+    positioner->set_size(windowGeometry.width(), windowGeometry.height());
+    positioner->set_constraint_adjustment(constraintAdjustment);
+    return positioner;
+}
+
+
 QWaylandXdgShell::QWaylandXdgShell(QWaylandDisplay *display, QtWayland::xdg_wm_base *xdgWmBase)
     : m_display(display), m_xdgWmBase(xdgWmBase)
 {
diff --git a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell_p.h b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell_p.h
index 951e8234..d78a2a92 100644
--- a/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell_p.h
+++ b/src/plugins/shellintegration/xdg-shell/qwaylandxdgshell_p.h
@@ -67,6 +67,7 @@ public:
     void setAlertState(bool enabled) override;
     bool isAlertState() const override { return m_alertState; }
     QString externWindowHandle() override;
+    void setWindowPosition(const QPoint &position) override;
 
     void setSizeHints();
 
@@ -121,6 +122,7 @@ private:
         void grab(QWaylandInputDevice *seat, uint serial);
         void xdg_popup_configure(int32_t x, int32_t y, int32_t width, int32_t height) override;
         void xdg_popup_popup_done() override;
+        void xdg_popup_repositioned(uint32_t token) override;
 
         QWaylandXdgSurface *m_xdgSurface = nullptr;
         QWaylandXdgSurface *m_parentXdgSurface = nullptr;
@@ -133,6 +135,7 @@ private:
     void setToplevel();
     void setPopup(QWaylandWindow *parent);
     void setGrabPopup(QWaylandWindow *parent, QWaylandInputDevice *device, int serial);
+    std::unique_ptr<QtWayland::xdg_positioner> createPositioner(QWaylandWindow *parent);
 
     QWaylandXdgShell *m_shell = nullptr;
     QWaylandWindow *m_window = nullptr;
